
RGB_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c9c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08003e78  08003e78  00013e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004060  08004060  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004060  08004060  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004060  08004060  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004060  08004060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004064  08004064  00014064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08004074  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08004074  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d68c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d66  00000000  00000000  0002d6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0002f430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  000301b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002590e  00000000  00000000  00030e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d796  00000000  00000000  00056766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f757a  00000000  00000000  00063efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b476  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ca4  00000000  00000000  0015b4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003e5c 	.word	0x08003e5c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003e5c 	.word	0x08003e5c

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2iz>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008fc:	d215      	bcs.n	800092a <__aeabi_d2iz+0x36>
 80008fe:	d511      	bpl.n	8000924 <__aeabi_d2iz+0x30>
 8000900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d912      	bls.n	8000930 <__aeabi_d2iz+0x3c>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800091a:	fa23 f002 	lsr.w	r0, r3, r2
 800091e:	bf18      	it	ne
 8000920:	4240      	negne	r0, r0
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d105      	bne.n	800093c <__aeabi_d2iz+0x48>
 8000930:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000934:	bf08      	it	eq
 8000936:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_d2uiz>:
 8000944:	004a      	lsls	r2, r1, #1
 8000946:	d211      	bcs.n	800096c <__aeabi_d2uiz+0x28>
 8000948:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800094c:	d211      	bcs.n	8000972 <__aeabi_d2uiz+0x2e>
 800094e:	d50d      	bpl.n	800096c <__aeabi_d2uiz+0x28>
 8000950:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000954:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000958:	d40e      	bmi.n	8000978 <__aeabi_d2uiz+0x34>
 800095a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800095e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000962:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000966:	fa23 f002 	lsr.w	r0, r3, r2
 800096a:	4770      	bx	lr
 800096c:	f04f 0000 	mov.w	r0, #0
 8000970:	4770      	bx	lr
 8000972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000976:	d102      	bne.n	800097e <__aeabi_d2uiz+0x3a>
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	4770      	bx	lr
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	4770      	bx	lr
 8000984:	0000      	movs	r0, r0
	...

08000988 <sine>:
int sawtooth_psc=0;    		// prescaler which divides the frequency of triangular wave for sawtooth wave
uint32_t u_sawtooth=0; 		// momentary value of sawtooth voltage (from 0 to 4095)
bool triangle_dir=0;   		// declares whether the triangular voltage should increase or decrease
uint32_t u_triangle=0;  	// momentary value of triangular voltage (from 0 to 4095)

uint32_t sine(t){                                    		// function to calculate the sine value for each millisecond
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
    u_sine=(sin(t*((2*M_PI)/2000))+1)*(((0xFFF)+1)/2); 		// calculate u_sine(t)
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff febd 	bl	8000710 <__aeabi_i2d>
 8000996:	a31b      	add	r3, pc, #108	; (adr r3, 8000a04 <sine+0x7c>)
 8000998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800099c:	f7ff fc3c 	bl	8000218 <__aeabi_dmul>
 80009a0:	4602      	mov	r2, r0
 80009a2:	460b      	mov	r3, r1
 80009a4:	ec43 2b17 	vmov	d7, r2, r3
 80009a8:	eeb0 0a47 	vmov.f32	s0, s14
 80009ac:	eef0 0a67 	vmov.f32	s1, s15
 80009b0:	f002 fa0a 	bl	8002dc8 <sin>
 80009b4:	ec51 0b10 	vmov	r0, r1, d0
 80009b8:	f04f 0200 	mov.w	r2, #0
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <sine+0x70>)
 80009be:	f7ff fd5b 	bl	8000478 <__adddf3>
 80009c2:	4602      	mov	r2, r0
 80009c4:	460b      	mov	r3, r1
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	f04f 0200 	mov.w	r2, #0
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <sine+0x74>)
 80009d0:	f7ff fc22 	bl	8000218 <__aeabi_dmul>
 80009d4:	4602      	mov	r2, r0
 80009d6:	460b      	mov	r3, r1
 80009d8:	4610      	mov	r0, r2
 80009da:	4619      	mov	r1, r3
 80009dc:	f7ff ffb2 	bl	8000944 <__aeabi_d2uiz>
 80009e0:	4603      	mov	r3, r0
 80009e2:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <sine+0x78>)
 80009e4:	6013      	str	r3, [r2, #0]
    return u_sine;                                    		// return u_sine(t)
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <sine+0x78>)
 80009e8:	681b      	ldr	r3, [r3, #0]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	f3af 8000 	nop.w
 80009f8:	3ff00000 	.word	0x3ff00000
 80009fc:	40a00000 	.word	0x40a00000
 8000a00:	200000a8 	.word	0x200000a8
 8000a04:	b68b71c3 	.word	0xb68b71c3
 8000a08:	3f69bc65 	.word	0x3f69bc65

08000a0c <sawtooth>:

void sawtooth(){               	 // function to calculate u_sawtooth
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
    u_sawtooth++;                // increase the voltage value in the range from 0 to 4095
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <sawtooth+0x2c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <sawtooth+0x2c>)
 8000a18:	6013      	str	r3, [r2, #0]
    if (u_sawtooth>=4095){       // check if the value of u_sawtooth is at its maximum
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <sawtooth+0x2c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d902      	bls.n	8000a2c <sawtooth+0x20>
        u_sawtooth=0;            // perform a sudden "drop" to 0V and start increasing the voltage again
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <sawtooth+0x2c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
    }
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	200000b0 	.word	0x200000b0

08000a3c <triangle>:

void triangle(){                	// function to calculate u_triangle
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
    if (triangle_dir==1){        	// check whether the voltage should increase or decrease
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <triangle+0x4c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d00e      	beq.n	8000a66 <triangle+0x2a>
        u_triangle++;            	// function should increase, increase the voltage value in the range from 0 to 4095
 8000a48:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <triangle+0x50>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <triangle+0x50>)
 8000a50:	6013      	str	r3, [r2, #0]
        if (u_triangle>=4095){   	// check if the value of u_triangle is at its maximum
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <triangle+0x50>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d90f      	bls.n	8000a7e <triangle+0x42>
            triangle_dir=0;      	// change from increasing voltage to decreasing voltage
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <triangle+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
        u_triangle--;            	// decrease the voltage value in the range from 0 to 4095
        if (u_triangle<=0){        	// check if the value of u_triangle is at its minimum
            triangle_dir=1;        	// change from decreasing voltage to increasing voltage
        }
    }
}
 8000a64:	e00b      	b.n	8000a7e <triangle+0x42>
        u_triangle--;            	// decrease the voltage value in the range from 0 to 4095
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <triangle+0x50>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <triangle+0x50>)
 8000a6e:	6013      	str	r3, [r2, #0]
        if (u_triangle<=0){        	// check if the value of u_triangle is at its minimum
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <triangle+0x50>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <triangle+0x42>
            triangle_dir=1;        	// change from decreasing voltage to increasing voltage
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <triangle+0x4c>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	701a      	strb	r2, [r3, #0]
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	200000b4 	.word	0x200000b4
 8000a8c:	200000b8 	.word	0x200000b8

08000a90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){  	// function handling interrupts from timers
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
    if (htim==&htim6){              // check if the interrupt comes from TIM6
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d10f      	bne.n	8000ac0 <HAL_TIM_PeriodElapsedCallback+0x30>
        triangle();                 // call the triangle() function
 8000aa0:	f7ff ffcc 	bl	8000a3c <triangle>
        sawtooth_psc++;             // increase the frequency divider value for the sawtooth wave
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000aac:	6013      	str	r3, [r2, #0]
        if(sawtooth_psc>=2){        // check if the divider value has reached the appropriate value
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	dd04      	ble.n	8000ac0 <HAL_TIM_PeriodElapsedCallback+0x30>
            sawtooth();            	// call the sawtooth() function
 8000ab6:	f7ff ffa9 	bl	8000a0c <sawtooth>
            sawtooth_psc=0;         // set the frequency divider back to 0 so that the sawtooth and triangle waves have the same period
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
        }

    }
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000050 	.word	0x20000050
 8000acc:	200000ac 	.word	0x200000ac

08000ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad4:	f000 fa97 	bl	8001006 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad8:	f000 f846 	bl	8000b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000adc:	f000 f944 	bl	8000d68 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000ae0:	f000 f88e 	bl	8000c00 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000ae4:	f000 f8d0 	bl	8000c88 <MX_DAC2_Init>
  MX_TIM6_Init();
 8000ae8:	f000 f908 	bl	8000cfc <MX_TIM6_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      new_t = HAL_GetTick();                // Get the current time elapsed since the uC started
 8000aec:	f000 faf0 	bl	80010d0 <HAL_GetTick>
 8000af0:	4603      	mov	r3, r0
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <main+0x78>)
 8000af4:	6013      	str	r3, [r2, #0]
      if (old_t != new_t)                   // Check if the previous time value is different from the current one
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <main+0x7c>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <main+0x78>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d00c      	beq.n	8000b1c <main+0x4c>
      {
          old_t = new_t;                    // Assign the previous time value to the current one
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <main+0x78>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <main+0x7c>)
 8000b08:	6013      	str	r3, [r2, #0]
          t = new_t;                        // Assign the variable t the current time value
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <main+0x78>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <main+0x80>)
 8000b10:	6013      	str	r3, [r2, #0]
          sine(t);                          // Call the sine() function
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <main+0x80>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ff36 	bl	8000988 <sine>
      }

      HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, u_sine);     	// Set the value of u_sine on channel 1 of DAC1 (Red LED)
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <main+0x84>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	480c      	ldr	r0, [pc, #48]	; (8000b58 <main+0x88>)
 8000b26:	f000 fc8c 	bl	8001442 <HAL_DAC_SetValue>
      HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, u_sawtooth); 	// Set the value of u_sawtooth on channel 2 of DAC1 (Green LED)
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <main+0x8c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2110      	movs	r1, #16
 8000b32:	4809      	ldr	r0, [pc, #36]	; (8000b58 <main+0x88>)
 8000b34:	f000 fc85 	bl	8001442 <HAL_DAC_SetValue>
      HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, u_triangle); 	// Set the value of u_sine on channel 1 of DAC2 (Blue LED)
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <main+0x90>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4808      	ldr	r0, [pc, #32]	; (8000b64 <main+0x94>)
 8000b42:	f000 fc7e 	bl	8001442 <HAL_DAC_SetValue>
      new_t = HAL_GetTick();                // Get the current time elapsed since the uC started
 8000b46:	e7d1      	b.n	8000aec <main+0x1c>
 8000b48:	200000a4 	.word	0x200000a4
 8000b4c:	200000a0 	.word	0x200000a0
 8000b50:	2000009c 	.word	0x2000009c
 8000b54:	200000a8 	.word	0x200000a8
 8000b58:	20000028 	.word	0x20000028
 8000b5c:	200000b0 	.word	0x200000b0
 8000b60:	200000b8 	.word	0x200000b8
 8000b64:	2000003c 	.word	0x2000003c

08000b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b094      	sub	sp, #80	; 0x50
 8000b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6e:	f107 0318 	add.w	r3, r7, #24
 8000b72:	2238      	movs	r2, #56	; 0x38
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 f91c 	bl	8002db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b8e:	f000 ffbf 	bl	8001b10 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9c:	2340      	movs	r3, #64	; 0x40
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000bac:	230a      	movs	r3, #10
 8000bae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bbc:	f107 0318 	add.w	r3, r7, #24
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f001 f849 	bl	8001c58 <HAL_RCC_OscConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000bcc:	f000 f8e4 	bl	8000d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2102      	movs	r1, #2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 fb4d 	bl	8002288 <HAL_RCC_ClockConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000bf4:	f000 f8d0 	bl	8000d98 <Error_Handler>
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	3750      	adds	r7, #80	; 0x50
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	; 0x30
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c06:	463b      	mov	r3, r7
 8000c08:	2230      	movs	r2, #48	; 0x30
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f002 f8d1 	bl	8002db4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <MX_DAC1_Init+0x80>)
 8000c14:	4a1b      	ldr	r2, [pc, #108]	; (8000c84 <MX_DAC1_Init+0x84>)
 8000c16:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c18:	4819      	ldr	r0, [pc, #100]	; (8000c80 <MX_DAC1_Init+0x80>)
 8000c1a:	f000 fb96 	bl	800134a <HAL_DAC_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c24:	f000 f8b8 	bl	8000d98 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4619      	mov	r1, r3
 8000c52:	480b      	ldr	r0, [pc, #44]	; (8000c80 <MX_DAC1_Init+0x80>)
 8000c54:	f000 fc28 	bl	80014a8 <HAL_DAC_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000c5e:	f000 f89b 	bl	8000d98 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c62:	463b      	mov	r3, r7
 8000c64:	2210      	movs	r2, #16
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_DAC1_Init+0x80>)
 8000c6a:	f000 fc1d 	bl	80014a8 <HAL_DAC_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000c74:	f000 f890 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	3730      	adds	r7, #48	; 0x30
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000028 	.word	0x20000028
 8000c84:	50000800 	.word	0x50000800

08000c88 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08c      	sub	sp, #48	; 0x30
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c8e:	463b      	mov	r3, r7
 8000c90:	2230      	movs	r2, #48	; 0x30
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 f88d 	bl	8002db4 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <MX_DAC2_Init+0x6c>)
 8000c9c:	4a16      	ldr	r2, [pc, #88]	; (8000cf8 <MX_DAC2_Init+0x70>)
 8000c9e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000ca0:	4814      	ldr	r0, [pc, #80]	; (8000cf4 <MX_DAC2_Init+0x6c>)
 8000ca2:	f000 fb52 	bl	800134a <HAL_DAC_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000cac:	f000 f874 	bl	8000d98 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <MX_DAC2_Init+0x6c>)
 8000cdc:	f000 fbe4 	bl	80014a8 <HAL_DAC_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000ce6:	f000 f857 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	3730      	adds	r7, #48	; 0x30
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000003c 	.word	0x2000003c
 8000cf8:	50000c00 	.word	0x50000c00

08000cfc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_TIM6_Init+0x64>)
 8000d0e:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <MX_TIM6_Init+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9769;
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_TIM6_Init+0x64>)
 8000d14:	f242 6229 	movw	r2, #9769	; 0x2629
 8000d18:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_TIM6_Init+0x64>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_TIM6_Init+0x64>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_TIM6_Init+0x64>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <MX_TIM6_Init+0x64>)
 8000d2e:	f001 fc9b 	bl	8002668 <HAL_TIM_Base_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d38:	f000 f82e 	bl	8000d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	4619      	mov	r1, r3
 8000d48:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_TIM6_Init+0x64>)
 8000d4a:	f001 ff33 	bl	8002bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d54:	f000 f820 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000050 	.word	0x20000050
 8000d64:	40001000 	.word	0x40001000

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_GPIO_Init+0x2c>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <MX_GPIO_Init+0x2c>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_GPIO_Init+0x2c>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <Error_Handler+0x8>
	...

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <HAL_MspInit+0x44>)
 8000dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dae:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <HAL_MspInit+0x44>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6613      	str	r3, [r2, #96]	; 0x60
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_MspInit+0x44>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_MspInit+0x44>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <HAL_MspInit+0x44>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_MspInit+0x44>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08c      	sub	sp, #48	; 0x30
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a2f      	ldr	r2, [pc, #188]	; (8000ec8 <HAL_DAC_MspInit+0xdc>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d12d      	bne.n	8000e6a <HAL_DAC_MspInit+0x7e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000e0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <HAL_DAC_MspInit+0xe0>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a2e      	ldr	r2, [pc, #184]	; (8000ecc <HAL_DAC_MspInit+0xe0>)
 8000e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <HAL_DAC_MspInit+0xe0>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <HAL_DAC_MspInit+0xe0>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	4a28      	ldr	r2, [pc, #160]	; (8000ecc <HAL_DAC_MspInit+0xe0>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e32:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <HAL_DAC_MspInit+0xe0>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e3e:	2330      	movs	r3, #48	; 0x30
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e42:	2303      	movs	r3, #3
 8000e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e54:	f000 fcda 	bl	800180c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	2036      	movs	r0, #54	; 0x36
 8000e5e:	f000 fa40 	bl	80012e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e62:	2036      	movs	r0, #54	; 0x36
 8000e64:	f000 fa57 	bl	8001316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8000e68:	e029      	b.n	8000ebe <HAL_DAC_MspInit+0xd2>
  else if(hdac->Instance==DAC2)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a18      	ldr	r2, [pc, #96]	; (8000ed0 <HAL_DAC_MspInit+0xe4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d124      	bne.n	8000ebe <HAL_DAC_MspInit+0xd2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_DAC_MspInit+0xe0>)
 8000e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e78:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <HAL_DAC_MspInit+0xe0>)
 8000e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_DAC_MspInit+0xe0>)
 8000e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_DAC_MspInit+0xe0>)
 8000e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_DAC_MspInit+0xe0>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <HAL_DAC_MspInit+0xe0>)
 8000e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ea4:	2340      	movs	r3, #64	; 0x40
 8000ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eba:	f000 fca7 	bl	800180c <HAL_GPIO_Init>
}
 8000ebe:	bf00      	nop
 8000ec0:	3730      	adds	r7, #48	; 0x30
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	50000800 	.word	0x50000800
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	50000c00 	.word	0x50000c00

08000ed4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <HAL_TIM_Base_MspInit+0x44>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d113      	bne.n	8000f0e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_TIM_Base_MspInit+0x48>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <HAL_TIM_Base_MspInit+0x48>)
 8000eec:	f043 0310 	orr.w	r3, r3, #16
 8000ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_TIM_Base_MspInit+0x48>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	f003 0310 	and.w	r3, r3, #16
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2101      	movs	r1, #1
 8000f02:	2036      	movs	r0, #54	; 0x36
 8000f04:	f000 f9ed 	bl	80012e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f08:	2036      	movs	r0, #54	; 0x36
 8000f0a:	f000 fa04 	bl	8001316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40001000 	.word	0x40001000
 8000f1c:	40021000 	.word	0x40021000

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6c:	f000 f89e 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <TIM6_DAC_IRQHandler+0x14>)
 8000f7a:	f001 fbcc 	bl	8002716 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8000f7e:	4803      	ldr	r0, [pc, #12]	; (8000f8c <TIM6_DAC_IRQHandler+0x18>)
 8000f80:	f000 fa05 	bl	800138e <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000050 	.word	0x20000050
 8000f8c:	20000028 	.word	0x20000028

08000f90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fba:	490e      	ldr	r1, [pc, #56]	; (8000ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <LoopForever+0xe>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd0:	4c0b      	ldr	r4, [pc, #44]	; (8001000 <LoopForever+0x16>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fde:	f7ff ffd7 	bl	8000f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f001 fec3 	bl	8002d6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fe6:	f7ff fd73 	bl	8000ad0 <main>

08000fea <LoopForever>:

LoopForever:
    b LoopForever
 8000fea:	e7fe      	b.n	8000fea <LoopForever>
  ldr   r0, =_estack
 8000fec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ff8:	08004068 	.word	0x08004068
  ldr r2, =_sbss
 8000ffc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001000:	200000c0 	.word	0x200000c0

08001004 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC1_2_IRQHandler>

08001006 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 f95b 	bl	80012cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001016:	2000      	movs	r0, #0
 8001018:	f000 f80e 	bl	8001038 <HAL_InitTick>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	71fb      	strb	r3, [r7, #7]
 8001026:	e001      	b.n	800102c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001028:	f7ff febc 	bl	8000da4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800102c:	79fb      	ldrb	r3, [r7, #7]

}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <HAL_InitTick+0x68>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d022      	beq.n	8001092 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_InitTick+0x6c>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_InitTick+0x68>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001058:	fbb1 f3f3 	udiv	r3, r1, r3
 800105c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f000 f966 	bl	8001332 <HAL_SYSTICK_Config>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10f      	bne.n	800108c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b0f      	cmp	r3, #15
 8001070:	d809      	bhi.n	8001086 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001072:	2200      	movs	r2, #0
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	f04f 30ff 	mov.w	r0, #4294967295
 800107a:	f000 f932 	bl	80012e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_InitTick+0x70>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	e007      	b.n	8001096 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	e004      	b.n	8001096 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e001      	b.n	8001096 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000004 	.word	0x20000004

080010ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_IncTick+0x1c>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_IncTick+0x20>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a03      	ldr	r2, [pc, #12]	; (80010c8 <HAL_IncTick+0x1c>)
 80010bc:	6013      	str	r3, [r2, #0]
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	200000bc 	.word	0x200000bc
 80010cc:	20000008 	.word	0x20000008

080010d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <HAL_GetTick+0x14>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	200000bc 	.word	0x200000bc

080010e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff ffee 	bl	80010d0 <HAL_GetTick>
 80010f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001100:	d004      	beq.n	800110c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_Delay+0x40>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800110c:	bf00      	nop
 800110e:	f7ff ffdf 	bl	80010d0 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	429a      	cmp	r2, r3
 800111c:	d8f7      	bhi.n	800110e <HAL_Delay+0x26>
  {
  }
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000008 	.word	0x20000008

0800112c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001148:	4013      	ands	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <__NVIC_GetPriorityGrouping+0x18>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	f003 0307 	and.w	r3, r3, #7
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	db0b      	blt.n	80011ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f003 021f 	and.w	r2, r3, #31
 80011a8:	4907      	ldr	r1, [pc, #28]	; (80011c8 <__NVIC_EnableIRQ+0x38>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	2001      	movs	r0, #1
 80011b2:	fa00 f202 	lsl.w	r2, r0, r2
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000e100 	.word	0xe000e100

080011cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	db0a      	blt.n	80011f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	490c      	ldr	r1, [pc, #48]	; (8001218 <__NVIC_SetPriority+0x4c>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	440b      	add	r3, r1
 80011f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f4:	e00a      	b.n	800120c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4908      	ldr	r1, [pc, #32]	; (800121c <__NVIC_SetPriority+0x50>)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	3b04      	subs	r3, #4
 8001204:	0112      	lsls	r2, r2, #4
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	440b      	add	r3, r1
 800120a:	761a      	strb	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000e100 	.word	0xe000e100
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f1c3 0307 	rsb	r3, r3, #7
 800123a:	2b04      	cmp	r3, #4
 800123c:	bf28      	it	cs
 800123e:	2304      	movcs	r3, #4
 8001240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3304      	adds	r3, #4
 8001246:	2b06      	cmp	r3, #6
 8001248:	d902      	bls.n	8001250 <NVIC_EncodePriority+0x30>
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3b03      	subs	r3, #3
 800124e:	e000      	b.n	8001252 <NVIC_EncodePriority+0x32>
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	f04f 32ff 	mov.w	r2, #4294967295
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	401a      	ands	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001268:	f04f 31ff 	mov.w	r1, #4294967295
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	43d9      	mvns	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	4313      	orrs	r3, r2
         );
}
 800127a:	4618      	mov	r0, r3
 800127c:	3724      	adds	r7, #36	; 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001298:	d301      	bcc.n	800129e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129a:	2301      	movs	r3, #1
 800129c:	e00f      	b.n	80012be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <SysTick_Config+0x40>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a6:	210f      	movs	r1, #15
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f7ff ff8e 	bl	80011cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <SysTick_Config+0x40>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <SysTick_Config+0x40>)
 80012b8:	2207      	movs	r2, #7
 80012ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	e000e010 	.word	0xe000e010

080012cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff29 	bl	800112c <__NVIC_SetPriorityGrouping>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f0:	f7ff ff40 	bl	8001174 <__NVIC_GetPriorityGrouping>
 80012f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	f7ff ff90 	bl	8001220 <NVIC_EncodePriority>
 8001300:	4602      	mov	r2, r0
 8001302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff5f 	bl	80011cc <__NVIC_SetPriority>
}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff33 	bl	8001190 <__NVIC_EnableIRQ>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ffa4 	bl	8001288 <SysTick_Config>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e014      	b.n	8001386 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	791b      	ldrb	r3, [r3, #4]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fd3d 	bl	8000dec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2202      	movs	r2, #2
 8001376:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013a4:	d120      	bne.n	80013e8 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013b4:	d118      	bne.n	80013e8 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2204      	movs	r2, #4
 80013ba:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	f043 0201 	orr.w	r2, r3, #1
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013e0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f855 	bl	8001492 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013f6:	d120      	bne.n	800143a <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001406:	d118      	bne.n	800143a <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2204      	movs	r2, #4
 800140c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	f043 0202 	orr.w	r2, r3, #2
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001422:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001432:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f9df 	bl	80017f8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001442:	b480      	push	{r7}
 8001444:	b087      	sub	sp, #28
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d105      	bne.n	8001472 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	3308      	adds	r3, #8
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	e004      	b.n	800147c <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4413      	add	r3, r2
 8001478:	3314      	adds	r3, #20
 800147a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	461a      	mov	r2, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	371c      	adds	r7, #28
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	795b      	ldrb	r3, [r3, #5]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_DAC_ConfigChannel+0x18>
 80014bc:	2302      	movs	r3, #2
 80014be:	e192      	b.n	80017e6 <HAL_DAC_ConfigChannel+0x33e>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2201      	movs	r2, #1
 80014c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2202      	movs	r2, #2
 80014ca:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d174      	bne.n	80015be <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80014d4:	f7ff fdfc 	bl	80010d0 <HAL_GetTick>
 80014d8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d134      	bne.n	800154a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80014e0:	e011      	b.n	8001506 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80014e2:	f7ff fdf5 	bl	80010d0 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d90a      	bls.n	8001506 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	f043 0208 	orr.w	r2, r3, #8
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2203      	movs	r2, #3
 8001500:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e16f      	b.n	80017e6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1e6      	bne.n	80014e2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001514:	2001      	movs	r0, #1
 8001516:	f7ff fde7 	bl	80010e8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001522:	641a      	str	r2, [r3, #64]	; 0x40
 8001524:	e01e      	b.n	8001564 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001526:	f7ff fdd3 	bl	80010d0 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b01      	cmp	r3, #1
 8001532:	d90a      	bls.n	800154a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	f043 0208 	orr.w	r2, r3, #8
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2203      	movs	r2, #3
 8001544:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e14d      	b.n	80017e6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001550:	2b00      	cmp	r3, #0
 8001552:	dbe8      	blt.n	8001526 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff fdc7 	bl	80010e8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001562:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f003 0310 	and.w	r3, r3, #16
 8001570:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	ea02 0103 	and.w	r1, r2, r3
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	409a      	lsls	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	21ff      	movs	r1, #255	; 0xff
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	ea02 0103 	and.w	r1, r2, r3
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f003 0310 	and.w	r3, r3, #16
 80015b4:	409a      	lsls	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d11d      	bne.n	8001602 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	221f      	movs	r2, #31
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015de:	4013      	ands	r3, r2
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f6:	4313      	orrs	r3, r2
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001600:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	2207      	movs	r2, #7
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161a:	4013      	ands	r3, r2
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d102      	bne.n	800162c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
 800162a:	e00f      	b.n	800164c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	2b02      	cmp	r3, #2
 8001632:	d102      	bne.n	800163a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001634:	2301      	movs	r3, #1
 8001636:	623b      	str	r3, [r7, #32]
 8001638:	e008      	b.n	800164c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001642:	2301      	movs	r3, #1
 8001644:	623b      	str	r3, [r7, #32]
 8001646:	e001      	b.n	800164c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	4313      	orrs	r3, r2
 8001656:	6a3a      	ldr	r2, [r7, #32]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800166e:	4013      	ands	r3, r2
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	791b      	ldrb	r3, [r3, #4]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d102      	bne.n	8001680 <HAL_DAC_ConfigChannel+0x1d8>
 800167a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800167e:	e000      	b.n	8001682 <HAL_DAC_ConfigChannel+0x1da>
 8001680:	2300      	movs	r3, #0
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169a:	4013      	ands	r3, r2
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	795b      	ldrb	r3, [r3, #5]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d102      	bne.n	80016ac <HAL_DAC_ConfigChannel+0x204>
 80016a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016aa:	e000      	b.n	80016ae <HAL_DAC_ConfigChannel+0x206>
 80016ac:	2300      	movs	r3, #0
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d114      	bne.n	80016ee <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80016c4:	f000 ff7e 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 80016c8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	4a48      	ldr	r2, [pc, #288]	; (80017f0 <HAL_DAC_ConfigChannel+0x348>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d904      	bls.n	80016dc <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
 80016da:	e00f      	b.n	80016fc <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	4a45      	ldr	r2, [pc, #276]	; (80017f4 <HAL_DAC_ConfigChannel+0x34c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d90a      	bls.n	80016fa <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
 80016ec:	e006      	b.n	80016fc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f4:	4313      	orrs	r3, r2
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
 80016f8:	e000      	b.n	80016fc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80016fa:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170a:	4313      	orrs	r3, r2
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001714:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6819      	ldr	r1, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43da      	mvns	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	400a      	ands	r2, r1
 8001732:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0310 	and.w	r3, r3, #16
 8001742:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800174e:	4013      	ands	r3, r2
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001766:	4313      	orrs	r3, r2
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001770:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6819      	ldr	r1, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	22c0      	movs	r2, #192	; 0xc0
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43da      	mvns	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	400a      	ands	r2, r1
 800178c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	089b      	lsrs	r3, r3, #2
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	f640 710f 	movw	r1, #3855	; 0xf0f
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	ea02 0103 	and.w	r1, r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	409a      	lsls	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2201      	movs	r2, #1
 80017dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3728      	adds	r7, #40	; 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	09896800 	.word	0x09896800
 80017f4:	04c4b400 	.word	0x04c4b400

080017f8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800180c:	b480      	push	{r7}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800181a:	e15a      	b.n	8001ad2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2101      	movs	r1, #1
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 814c 	beq.w	8001acc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b01      	cmp	r3, #1
 800183e:	d005      	beq.n	800184c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001848:	2b02      	cmp	r3, #2
 800184a:	d130      	bne.n	80018ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	2203      	movs	r2, #3
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001882:	2201      	movs	r2, #1
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	f003 0201 	and.w	r2, r3, #1
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d017      	beq.n	80018ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d123      	bne.n	800193e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	08da      	lsrs	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3208      	adds	r2, #8
 80018fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	220f      	movs	r2, #15
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	691a      	ldr	r2, [r3, #16]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	08da      	lsrs	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3208      	adds	r2, #8
 8001938:	6939      	ldr	r1, [r7, #16]
 800193a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0203 	and.w	r2, r3, #3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 80a6 	beq.w	8001acc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001980:	4b5b      	ldr	r3, [pc, #364]	; (8001af0 <HAL_GPIO_Init+0x2e4>)
 8001982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001984:	4a5a      	ldr	r2, [pc, #360]	; (8001af0 <HAL_GPIO_Init+0x2e4>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6613      	str	r3, [r2, #96]	; 0x60
 800198c:	4b58      	ldr	r3, [pc, #352]	; (8001af0 <HAL_GPIO_Init+0x2e4>)
 800198e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001998:	4a56      	ldr	r2, [pc, #344]	; (8001af4 <HAL_GPIO_Init+0x2e8>)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	220f      	movs	r2, #15
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019c2:	d01f      	beq.n	8001a04 <HAL_GPIO_Init+0x1f8>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a4c      	ldr	r2, [pc, #304]	; (8001af8 <HAL_GPIO_Init+0x2ec>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d019      	beq.n	8001a00 <HAL_GPIO_Init+0x1f4>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a4b      	ldr	r2, [pc, #300]	; (8001afc <HAL_GPIO_Init+0x2f0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d013      	beq.n	80019fc <HAL_GPIO_Init+0x1f0>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a4a      	ldr	r2, [pc, #296]	; (8001b00 <HAL_GPIO_Init+0x2f4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d00d      	beq.n	80019f8 <HAL_GPIO_Init+0x1ec>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a49      	ldr	r2, [pc, #292]	; (8001b04 <HAL_GPIO_Init+0x2f8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d007      	beq.n	80019f4 <HAL_GPIO_Init+0x1e8>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a48      	ldr	r2, [pc, #288]	; (8001b08 <HAL_GPIO_Init+0x2fc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d101      	bne.n	80019f0 <HAL_GPIO_Init+0x1e4>
 80019ec:	2305      	movs	r3, #5
 80019ee:	e00a      	b.n	8001a06 <HAL_GPIO_Init+0x1fa>
 80019f0:	2306      	movs	r3, #6
 80019f2:	e008      	b.n	8001a06 <HAL_GPIO_Init+0x1fa>
 80019f4:	2304      	movs	r3, #4
 80019f6:	e006      	b.n	8001a06 <HAL_GPIO_Init+0x1fa>
 80019f8:	2303      	movs	r3, #3
 80019fa:	e004      	b.n	8001a06 <HAL_GPIO_Init+0x1fa>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e002      	b.n	8001a06 <HAL_GPIO_Init+0x1fa>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <HAL_GPIO_Init+0x1fa>
 8001a04:	2300      	movs	r3, #0
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	f002 0203 	and.w	r2, r2, #3
 8001a0c:	0092      	lsls	r2, r2, #2
 8001a0e:	4093      	lsls	r3, r2
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a16:	4937      	ldr	r1, [pc, #220]	; (8001af4 <HAL_GPIO_Init+0x2e8>)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a24:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <HAL_GPIO_Init+0x300>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a48:	4a30      	ldr	r2, [pc, #192]	; (8001b0c <HAL_GPIO_Init+0x300>)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a4e:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <HAL_GPIO_Init+0x300>)
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a72:	4a26      	ldr	r2, [pc, #152]	; (8001b0c <HAL_GPIO_Init+0x300>)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a78:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <HAL_GPIO_Init+0x300>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <HAL_GPIO_Init+0x300>)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <HAL_GPIO_Init+0x300>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ac6:	4a11      	ldr	r2, [pc, #68]	; (8001b0c <HAL_GPIO_Init+0x300>)
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f47f ae9d 	bne.w	800181c <HAL_GPIO_Init+0x10>
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	bf00      	nop
 8001ae6:	371c      	adds	r7, #28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010000 	.word	0x40010000
 8001af8:	48000400 	.word	0x48000400
 8001afc:	48000800 	.word	0x48000800
 8001b00:	48000c00 	.word	0x48000c00
 8001b04:	48001000 	.word	0x48001000
 8001b08:	48001400 	.word	0x48001400
 8001b0c:	40010400 	.word	0x40010400

08001b10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d141      	bne.n	8001ba2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b1e:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b2a:	d131      	bne.n	8001b90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b2c:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b32:	4a46      	ldr	r2, [pc, #280]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b3c:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b44:	4a41      	ldr	r2, [pc, #260]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b4c:	4b40      	ldr	r3, [pc, #256]	; (8001c50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2232      	movs	r2, #50	; 0x32
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
 8001b56:	4a3f      	ldr	r2, [pc, #252]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b58:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5c:	0c9b      	lsrs	r3, r3, #18
 8001b5e:	3301      	adds	r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b62:	e002      	b.n	8001b6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b6a:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b76:	d102      	bne.n	8001b7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f2      	bne.n	8001b64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b7e:	4b33      	ldr	r3, [pc, #204]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b8a:	d158      	bne.n	8001c3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e057      	b.n	8001c40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b90:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b96:	4a2d      	ldr	r2, [pc, #180]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ba0:	e04d      	b.n	8001c3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba8:	d141      	bne.n	8001c2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001baa:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	d131      	bne.n	8001c1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bb8:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bbe:	4a23      	ldr	r2, [pc, #140]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bd0:	4a1e      	ldr	r2, [pc, #120]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2232      	movs	r2, #50	; 0x32
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	4a1c      	ldr	r2, [pc, #112]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	0c9b      	lsrs	r3, r3, #18
 8001bea:	3301      	adds	r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bee:	e002      	b.n	8001bf6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c02:	d102      	bne.n	8001c0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f2      	bne.n	8001bf0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c16:	d112      	bne.n	8001c3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e011      	b.n	8001c40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c22:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c2c:	e007      	b.n	8001c3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	40007000 	.word	0x40007000
 8001c50:	20000000 	.word	0x20000000
 8001c54:	431bde83 	.word	0x431bde83

08001c58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e306      	b.n	8002278 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d075      	beq.n	8001d62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c76:	4b97      	ldr	r3, [pc, #604]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c80:	4b94      	ldr	r3, [pc, #592]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	2b0c      	cmp	r3, #12
 8001c8e:	d102      	bne.n	8001c96 <HAL_RCC_OscConfig+0x3e>
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d002      	beq.n	8001c9c <HAL_RCC_OscConfig+0x44>
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d10b      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9c:	4b8d      	ldr	r3, [pc, #564]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d05b      	beq.n	8001d60 <HAL_RCC_OscConfig+0x108>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d157      	bne.n	8001d60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e2e1      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbc:	d106      	bne.n	8001ccc <HAL_RCC_OscConfig+0x74>
 8001cbe:	4b85      	ldr	r3, [pc, #532]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a84      	ldr	r2, [pc, #528]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e01d      	b.n	8001d08 <HAL_RCC_OscConfig+0xb0>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x98>
 8001cd6:	4b7f      	ldr	r3, [pc, #508]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a7e      	ldr	r2, [pc, #504]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b7c      	ldr	r3, [pc, #496]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a7b      	ldr	r2, [pc, #492]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e00b      	b.n	8001d08 <HAL_RCC_OscConfig+0xb0>
 8001cf0:	4b78      	ldr	r3, [pc, #480]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a77      	ldr	r2, [pc, #476]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b75      	ldr	r3, [pc, #468]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a74      	ldr	r2, [pc, #464]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d013      	beq.n	8001d38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff f9de 	bl	80010d0 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff f9da 	bl	80010d0 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	; 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e2a6      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2a:	4b6a      	ldr	r3, [pc, #424]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0xc0>
 8001d36:	e014      	b.n	8001d62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff f9ca 	bl	80010d0 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d40:	f7ff f9c6 	bl	80010d0 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e292      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d52:	4b60      	ldr	r3, [pc, #384]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0xe8>
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d075      	beq.n	8001e5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d6e:	4b59      	ldr	r3, [pc, #356]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d78:	4b56      	ldr	r3, [pc, #344]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	d102      	bne.n	8001d8e <HAL_RCC_OscConfig+0x136>
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d002      	beq.n	8001d94 <HAL_RCC_OscConfig+0x13c>
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d11f      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d94:	4b4f      	ldr	r3, [pc, #316]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_OscConfig+0x154>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e265      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dac:	4b49      	ldr	r3, [pc, #292]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	4946      	ldr	r1, [pc, #280]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001dc0:	4b45      	ldr	r3, [pc, #276]	; (8001ed8 <HAL_RCC_OscConfig+0x280>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff f937 	bl	8001038 <HAL_InitTick>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d043      	beq.n	8001e58 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e251      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d023      	beq.n	8001e24 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ddc:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a3c      	ldr	r2, [pc, #240]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff f972 	bl	80010d0 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df0:	f7ff f96e 	bl	80010d0 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e23a      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e02:	4b34      	ldr	r3, [pc, #208]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0e:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	061b      	lsls	r3, r3, #24
 8001e1c:	492d      	ldr	r1, [pc, #180]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
 8001e22:	e01a      	b.n	8001e5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e24:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a2a      	ldr	r2, [pc, #168]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7ff f94e 	bl	80010d0 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e38:	f7ff f94a 	bl	80010d0 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e216      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e4a:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x1e0>
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d041      	beq.n	8001eea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d01c      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e6e:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e74:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7ff f927 	bl	80010d0 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e86:	f7ff f923 	bl	80010d0 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e1ef      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0ef      	beq.n	8001e86 <HAL_RCC_OscConfig+0x22e>
 8001ea6:	e020      	b.n	8001eea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eae:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <HAL_RCC_OscConfig+0x27c>)
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb8:	f7ff f90a 	bl	80010d0 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ebe:	e00d      	b.n	8001edc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec0:	f7ff f906 	bl	80010d0 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d906      	bls.n	8001edc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e1d2      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001edc:	4b8c      	ldr	r3, [pc, #560]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8001ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1ea      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 80a6 	beq.w	8002044 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001efc:	4b84      	ldr	r3, [pc, #528]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_OscConfig+0x2b4>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <HAL_RCC_OscConfig+0x2b6>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00d      	beq.n	8001f2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	4b7f      	ldr	r3, [pc, #508]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	4a7e      	ldr	r2, [pc, #504]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8001f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f1e:	4b7c      	ldr	r3, [pc, #496]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2e:	4b79      	ldr	r3, [pc, #484]	; (8002114 <HAL_RCC_OscConfig+0x4bc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d118      	bne.n	8001f6c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f3a:	4b76      	ldr	r3, [pc, #472]	; (8002114 <HAL_RCC_OscConfig+0x4bc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a75      	ldr	r2, [pc, #468]	; (8002114 <HAL_RCC_OscConfig+0x4bc>)
 8001f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f46:	f7ff f8c3 	bl	80010d0 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4e:	f7ff f8bf 	bl	80010d0 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e18b      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f60:	4b6c      	ldr	r3, [pc, #432]	; (8002114 <HAL_RCC_OscConfig+0x4bc>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d108      	bne.n	8001f86 <HAL_RCC_OscConfig+0x32e>
 8001f74:	4b66      	ldr	r3, [pc, #408]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7a:	4a65      	ldr	r2, [pc, #404]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f84:	e024      	b.n	8001fd0 <HAL_RCC_OscConfig+0x378>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d110      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x358>
 8001f8e:	4b60      	ldr	r3, [pc, #384]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f94:	4a5e      	ldr	r2, [pc, #376]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f9e:	4b5c      	ldr	r3, [pc, #368]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8001fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa4:	4a5a      	ldr	r2, [pc, #360]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fae:	e00f      	b.n	8001fd0 <HAL_RCC_OscConfig+0x378>
 8001fb0:	4b57      	ldr	r3, [pc, #348]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8001fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb6:	4a56      	ldr	r2, [pc, #344]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc0:	4b53      	ldr	r3, [pc, #332]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc6:	4a52      	ldr	r2, [pc, #328]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8001fc8:	f023 0304 	bic.w	r3, r3, #4
 8001fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d016      	beq.n	8002006 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd8:	f7ff f87a 	bl	80010d0 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe0:	f7ff f876 	bl	80010d0 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e140      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff6:	4b46      	ldr	r3, [pc, #280]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8001ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0ed      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x388>
 8002004:	e015      	b.n	8002032 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002006:	f7ff f863 	bl	80010d0 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800200c:	e00a      	b.n	8002024 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200e:	f7ff f85f 	bl	80010d0 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f241 3288 	movw	r2, #5000	; 0x1388
 800201c:	4293      	cmp	r3, r2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e129      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002024:	4b3a      	ldr	r3, [pc, #232]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1ed      	bne.n	800200e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002032:	7ffb      	ldrb	r3, [r7, #31]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d105      	bne.n	8002044 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002038:	4b35      	ldr	r3, [pc, #212]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	4a34      	ldr	r2, [pc, #208]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 800203e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002042:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	2b00      	cmp	r3, #0
 800204e:	d03c      	beq.n	80020ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d01c      	beq.n	8002092 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002058:	4b2d      	ldr	r3, [pc, #180]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 800205a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800205e:	4a2c      	ldr	r2, [pc, #176]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7ff f832 	bl	80010d0 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002070:	f7ff f82e 	bl	80010d0 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e0fa      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002082:	4b23      	ldr	r3, [pc, #140]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8002084:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0ef      	beq.n	8002070 <HAL_RCC_OscConfig+0x418>
 8002090:	e01b      	b.n	80020ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002092:	4b1f      	ldr	r3, [pc, #124]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 8002094:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002098:	4a1d      	ldr	r2, [pc, #116]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a2:	f7ff f815 	bl	80010d0 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020aa:	f7ff f811 	bl	80010d0 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e0dd      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020bc:	4b14      	ldr	r3, [pc, #80]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 80020be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1ef      	bne.n	80020aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 80d1 	beq.w	8002276 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020d4:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b0c      	cmp	r3, #12
 80020de:	f000 808b 	beq.w	80021f8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d15e      	bne.n	80021a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a08      	ldr	r2, [pc, #32]	; (8002110 <HAL_RCC_OscConfig+0x4b8>)
 80020f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f6:	f7fe ffeb 	bl	80010d0 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020fc:	e00c      	b.n	8002118 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fe:	f7fe ffe7 	bl	80010d0 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d905      	bls.n	8002118 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e0b3      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
 8002110:	40021000 	.word	0x40021000
 8002114:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002118:	4b59      	ldr	r3, [pc, #356]	; (8002280 <HAL_RCC_OscConfig+0x628>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1ec      	bne.n	80020fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002124:	4b56      	ldr	r3, [pc, #344]	; (8002280 <HAL_RCC_OscConfig+0x628>)
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	4b56      	ldr	r3, [pc, #344]	; (8002284 <HAL_RCC_OscConfig+0x62c>)
 800212a:	4013      	ands	r3, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6a11      	ldr	r1, [r2, #32]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002134:	3a01      	subs	r2, #1
 8002136:	0112      	lsls	r2, r2, #4
 8002138:	4311      	orrs	r1, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800213e:	0212      	lsls	r2, r2, #8
 8002140:	4311      	orrs	r1, r2
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002146:	0852      	lsrs	r2, r2, #1
 8002148:	3a01      	subs	r2, #1
 800214a:	0552      	lsls	r2, r2, #21
 800214c:	4311      	orrs	r1, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002152:	0852      	lsrs	r2, r2, #1
 8002154:	3a01      	subs	r2, #1
 8002156:	0652      	lsls	r2, r2, #25
 8002158:	4311      	orrs	r1, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800215e:	06d2      	lsls	r2, r2, #27
 8002160:	430a      	orrs	r2, r1
 8002162:	4947      	ldr	r1, [pc, #284]	; (8002280 <HAL_RCC_OscConfig+0x628>)
 8002164:	4313      	orrs	r3, r2
 8002166:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002168:	4b45      	ldr	r3, [pc, #276]	; (8002280 <HAL_RCC_OscConfig+0x628>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a44      	ldr	r2, [pc, #272]	; (8002280 <HAL_RCC_OscConfig+0x628>)
 800216e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002172:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002174:	4b42      	ldr	r3, [pc, #264]	; (8002280 <HAL_RCC_OscConfig+0x628>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4a41      	ldr	r2, [pc, #260]	; (8002280 <HAL_RCC_OscConfig+0x628>)
 800217a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7fe ffa6 	bl	80010d0 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002188:	f7fe ffa2 	bl	80010d0 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e06e      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219a:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_RCC_OscConfig+0x628>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x530>
 80021a6:	e066      	b.n	8002276 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a8:	4b35      	ldr	r3, [pc, #212]	; (8002280 <HAL_RCC_OscConfig+0x628>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a34      	ldr	r2, [pc, #208]	; (8002280 <HAL_RCC_OscConfig+0x628>)
 80021ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021b4:	4b32      	ldr	r3, [pc, #200]	; (8002280 <HAL_RCC_OscConfig+0x628>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4a31      	ldr	r2, [pc, #196]	; (8002280 <HAL_RCC_OscConfig+0x628>)
 80021ba:	f023 0303 	bic.w	r3, r3, #3
 80021be:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80021c0:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <HAL_RCC_OscConfig+0x628>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a2e      	ldr	r2, [pc, #184]	; (8002280 <HAL_RCC_OscConfig+0x628>)
 80021c6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe ff7e 	bl	80010d0 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d8:	f7fe ff7a 	bl	80010d0 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e046      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <HAL_RCC_OscConfig+0x628>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x580>
 80021f6:	e03e      	b.n	8002276 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e039      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002204:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <HAL_RCC_OscConfig+0x628>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f003 0203 	and.w	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	429a      	cmp	r2, r3
 8002216:	d12c      	bne.n	8002272 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	3b01      	subs	r3, #1
 8002224:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d123      	bne.n	8002272 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d11b      	bne.n	8002272 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d113      	bne.n	8002272 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	3b01      	subs	r3, #1
 8002258:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800225a:	429a      	cmp	r2, r3
 800225c:	d109      	bne.n	8002272 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002268:	085b      	lsrs	r3, r3, #1
 800226a:	3b01      	subs	r3, #1
 800226c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800226e:	429a      	cmp	r2, r3
 8002270:	d001      	beq.n	8002276 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3720      	adds	r7, #32
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	019f800c 	.word	0x019f800c

08002288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e11e      	b.n	80024de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b91      	ldr	r3, [pc, #580]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d910      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b8e      	ldr	r3, [pc, #568]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 020f 	bic.w	r2, r3, #15
 80022b6:	498c      	ldr	r1, [pc, #560]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b8a      	ldr	r3, [pc, #552]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e106      	b.n	80024de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d073      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d129      	bne.n	8002338 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e4:	4b81      	ldr	r3, [pc, #516]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0f4      	b.n	80024de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80022f4:	f000 f972 	bl	80025dc <RCC_GetSysClockFreqFromPLLSource>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4a7c      	ldr	r2, [pc, #496]	; (80024f0 <HAL_RCC_ClockConfig+0x268>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d93f      	bls.n	8002382 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002302:	4b7a      	ldr	r3, [pc, #488]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d009      	beq.n	8002322 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002316:	2b00      	cmp	r3, #0
 8002318:	d033      	beq.n	8002382 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800231e:	2b00      	cmp	r3, #0
 8002320:	d12f      	bne.n	8002382 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002322:	4b72      	ldr	r3, [pc, #456]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800232a:	4a70      	ldr	r2, [pc, #448]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 800232c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002330:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	e024      	b.n	8002382 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d107      	bne.n	8002350 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002340:	4b6a      	ldr	r3, [pc, #424]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0c6      	b.n	80024de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002350:	4b66      	ldr	r3, [pc, #408]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0be      	b.n	80024de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002360:	f000 f8ce 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8002364:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4a61      	ldr	r2, [pc, #388]	; (80024f0 <HAL_RCC_ClockConfig+0x268>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d909      	bls.n	8002382 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800236e:	4b5f      	ldr	r3, [pc, #380]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002376:	4a5d      	ldr	r2, [pc, #372]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800237c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002382:	4b5a      	ldr	r3, [pc, #360]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 0203 	bic.w	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4957      	ldr	r1, [pc, #348]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002390:	4313      	orrs	r3, r2
 8002392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002394:	f7fe fe9c 	bl	80010d0 <HAL_GetTick>
 8002398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239c:	f7fe fe98 	bl	80010d0 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e095      	b.n	80024de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	4b4e      	ldr	r3, [pc, #312]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 020c 	and.w	r2, r3, #12
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d1eb      	bne.n	800239c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d023      	beq.n	8002418 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023dc:	4b43      	ldr	r3, [pc, #268]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a42      	ldr	r2, [pc, #264]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 80023e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d007      	beq.n	8002404 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80023f4:	4b3d      	ldr	r3, [pc, #244]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80023fc:	4a3b      	ldr	r2, [pc, #236]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 80023fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002402:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002404:	4b39      	ldr	r3, [pc, #228]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4936      	ldr	r1, [pc, #216]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
 8002416:	e008      	b.n	800242a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2b80      	cmp	r3, #128	; 0x80
 800241c:	d105      	bne.n	800242a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800241e:	4b33      	ldr	r3, [pc, #204]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	4a32      	ldr	r2, [pc, #200]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002424:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002428:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800242a:	4b2f      	ldr	r3, [pc, #188]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d21d      	bcs.n	8002474 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002438:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 020f 	bic.w	r2, r3, #15
 8002440:	4929      	ldr	r1, [pc, #164]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002448:	f7fe fe42 	bl	80010d0 <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	e00a      	b.n	8002466 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002450:	f7fe fe3e 	bl	80010d0 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	; 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e03b      	b.n	80024de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d1ed      	bne.n	8002450 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002480:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4917      	ldr	r1, [pc, #92]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800249e:	4b13      	ldr	r3, [pc, #76]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	490f      	ldr	r1, [pc, #60]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024b2:	f000 f825 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HAL_RCC_ClockConfig+0x264>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	490c      	ldr	r1, [pc, #48]	; (80024f4 <HAL_RCC_ClockConfig+0x26c>)
 80024c4:	5ccb      	ldrb	r3, [r1, r3]
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	fa22 f303 	lsr.w	r3, r2, r3
 80024ce:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <HAL_RCC_ClockConfig+0x270>)
 80024d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_RCC_ClockConfig+0x274>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fdae 	bl	8001038 <HAL_InitTick>
 80024dc:	4603      	mov	r3, r0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40022000 	.word	0x40022000
 80024ec:	40021000 	.word	0x40021000
 80024f0:	04c4b400 	.word	0x04c4b400
 80024f4:	08003e78 	.word	0x08003e78
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000004 	.word	0x20000004

08002500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002506:	4b2c      	ldr	r3, [pc, #176]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b04      	cmp	r3, #4
 8002510:	d102      	bne.n	8002518 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002512:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	e047      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002518:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d102      	bne.n	800252a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002524:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	e03e      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800252a:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b0c      	cmp	r3, #12
 8002534:	d136      	bne.n	80025a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	3301      	adds	r3, #1
 800254c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d10c      	bne.n	800256e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002554:	4a1a      	ldr	r2, [pc, #104]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	fbb2 f3f3 	udiv	r3, r2, r3
 800255c:	4a16      	ldr	r2, [pc, #88]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800255e:	68d2      	ldr	r2, [r2, #12]
 8002560:	0a12      	lsrs	r2, r2, #8
 8002562:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002566:	fb02 f303 	mul.w	r3, r2, r3
 800256a:	617b      	str	r3, [r7, #20]
      break;
 800256c:	e00c      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800256e:	4a13      	ldr	r2, [pc, #76]	; (80025bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	fbb2 f3f3 	udiv	r3, r2, r3
 8002576:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002578:	68d2      	ldr	r2, [r2, #12]
 800257a:	0a12      	lsrs	r2, r2, #8
 800257c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002580:	fb02 f303 	mul.w	r3, r2, r3
 8002584:	617b      	str	r3, [r7, #20]
      break;
 8002586:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0e5b      	lsrs	r3, r3, #25
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	3301      	adds	r3, #1
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	e001      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025a8:	693b      	ldr	r3, [r7, #16]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	371c      	adds	r7, #28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	00f42400 	.word	0x00f42400
 80025c0:	007a1200 	.word	0x007a1200

080025c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000000 	.word	0x20000000

080025dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025e2:	4b1e      	ldr	r3, [pc, #120]	; (800265c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025ec:	4b1b      	ldr	r3, [pc, #108]	; (800265c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3301      	adds	r3, #1
 80025f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d10c      	bne.n	800261a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002600:	4a17      	ldr	r2, [pc, #92]	; (8002660 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800260a:	68d2      	ldr	r2, [r2, #12]
 800260c:	0a12      	lsrs	r2, r2, #8
 800260e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	617b      	str	r3, [r7, #20]
    break;
 8002618:	e00c      	b.n	8002634 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800261a:	4a12      	ldr	r2, [pc, #72]	; (8002664 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002622:	4a0e      	ldr	r2, [pc, #56]	; (800265c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002624:	68d2      	ldr	r2, [r2, #12]
 8002626:	0a12      	lsrs	r2, r2, #8
 8002628:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800262c:	fb02 f303 	mul.w	r3, r2, r3
 8002630:	617b      	str	r3, [r7, #20]
    break;
 8002632:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	0e5b      	lsrs	r3, r3, #25
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	3301      	adds	r3, #1
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	fbb2 f3f3 	udiv	r3, r2, r3
 800264c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800264e:	687b      	ldr	r3, [r7, #4]
}
 8002650:	4618      	mov	r0, r3
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	40021000 	.word	0x40021000
 8002660:	007a1200 	.word	0x007a1200
 8002664:	00f42400 	.word	0x00f42400

08002668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e049      	b.n	800270e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe fc20 	bl	8000ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3304      	adds	r3, #4
 80026a4:	4619      	mov	r1, r3
 80026a6:	4610      	mov	r0, r2
 80026a8:	f000 f9dc 	bl	8002a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b02      	cmp	r3, #2
 800272a:	d122      	bne.n	8002772 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b02      	cmp	r3, #2
 8002738:	d11b      	bne.n	8002772 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f06f 0202 	mvn.w	r2, #2
 8002742:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f965 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
 800275e:	e005      	b.n	800276c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f957 	bl	8002a14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f968 	bl	8002a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b04      	cmp	r3, #4
 800277e:	d122      	bne.n	80027c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b04      	cmp	r3, #4
 800278c:	d11b      	bne.n	80027c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f06f 0204 	mvn.w	r2, #4
 8002796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f93b 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
 80027b2:	e005      	b.n	80027c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f92d 	bl	8002a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f93e 	bl	8002a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d122      	bne.n	800281a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d11b      	bne.n	800281a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f06f 0208 	mvn.w	r2, #8
 80027ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2204      	movs	r2, #4
 80027f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f911 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
 8002806:	e005      	b.n	8002814 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f903 	bl	8002a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f914 	bl	8002a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b10      	cmp	r3, #16
 8002826:	d122      	bne.n	800286e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b10      	cmp	r3, #16
 8002834:	d11b      	bne.n	800286e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f06f 0210 	mvn.w	r2, #16
 800283e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2208      	movs	r2, #8
 8002844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f8e7 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
 800285a:	e005      	b.n	8002868 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f8d9 	bl	8002a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f8ea 	bl	8002a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d10e      	bne.n	800289a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b01      	cmp	r3, #1
 8002888:	d107      	bne.n	800289a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f06f 0201 	mvn.w	r2, #1
 8002892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7fe f8fb 	bl	8000a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a4:	2b80      	cmp	r3, #128	; 0x80
 80028a6:	d10e      	bne.n	80028c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b2:	2b80      	cmp	r3, #128	; 0x80
 80028b4:	d107      	bne.n	80028c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fa17 	bl	8002cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d4:	d10e      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e0:	2b80      	cmp	r3, #128	; 0x80
 80028e2:	d107      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80028ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fa0a 	bl	8002d08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fe:	2b40      	cmp	r3, #64	; 0x40
 8002900:	d10e      	bne.n	8002920 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290c:	2b40      	cmp	r3, #64	; 0x40
 800290e:	d107      	bne.n	8002920 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f898 	bl	8002a50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b20      	cmp	r3, #32
 800292c:	d10e      	bne.n	800294c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0320 	and.w	r3, r3, #32
 8002938:	2b20      	cmp	r3, #32
 800293a:	d107      	bne.n	800294c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0220 	mvn.w	r2, #32
 8002944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f9ca 	bl	8002ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800295a:	d10f      	bne.n	800297c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800296a:	d107      	bne.n	800297c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f9d0 	bl	8002d1c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800298a:	d10f      	bne.n	80029ac <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800299a:	d107      	bne.n	80029ac <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80029a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f9c2 	bl	8002d30 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ba:	d10f      	bne.n	80029dc <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ca:	d107      	bne.n	80029dc <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80029d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f9b4 	bl	8002d44 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029ea:	d10f      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029fa:	d107      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f9a6 	bl	8002d58 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a46      	ldr	r2, [pc, #280]	; (8002b90 <TIM_Base_SetConfig+0x12c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d017      	beq.n	8002aac <TIM_Base_SetConfig+0x48>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a82:	d013      	beq.n	8002aac <TIM_Base_SetConfig+0x48>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a43      	ldr	r2, [pc, #268]	; (8002b94 <TIM_Base_SetConfig+0x130>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00f      	beq.n	8002aac <TIM_Base_SetConfig+0x48>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a42      	ldr	r2, [pc, #264]	; (8002b98 <TIM_Base_SetConfig+0x134>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d00b      	beq.n	8002aac <TIM_Base_SetConfig+0x48>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a41      	ldr	r2, [pc, #260]	; (8002b9c <TIM_Base_SetConfig+0x138>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d007      	beq.n	8002aac <TIM_Base_SetConfig+0x48>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a40      	ldr	r2, [pc, #256]	; (8002ba0 <TIM_Base_SetConfig+0x13c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d003      	beq.n	8002aac <TIM_Base_SetConfig+0x48>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a3f      	ldr	r2, [pc, #252]	; (8002ba4 <TIM_Base_SetConfig+0x140>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d108      	bne.n	8002abe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a33      	ldr	r2, [pc, #204]	; (8002b90 <TIM_Base_SetConfig+0x12c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d023      	beq.n	8002b0e <TIM_Base_SetConfig+0xaa>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002acc:	d01f      	beq.n	8002b0e <TIM_Base_SetConfig+0xaa>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a30      	ldr	r2, [pc, #192]	; (8002b94 <TIM_Base_SetConfig+0x130>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01b      	beq.n	8002b0e <TIM_Base_SetConfig+0xaa>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a2f      	ldr	r2, [pc, #188]	; (8002b98 <TIM_Base_SetConfig+0x134>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d017      	beq.n	8002b0e <TIM_Base_SetConfig+0xaa>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a2e      	ldr	r2, [pc, #184]	; (8002b9c <TIM_Base_SetConfig+0x138>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <TIM_Base_SetConfig+0xaa>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a2d      	ldr	r2, [pc, #180]	; (8002ba0 <TIM_Base_SetConfig+0x13c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00f      	beq.n	8002b0e <TIM_Base_SetConfig+0xaa>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a2d      	ldr	r2, [pc, #180]	; (8002ba8 <TIM_Base_SetConfig+0x144>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00b      	beq.n	8002b0e <TIM_Base_SetConfig+0xaa>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a2c      	ldr	r2, [pc, #176]	; (8002bac <TIM_Base_SetConfig+0x148>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d007      	beq.n	8002b0e <TIM_Base_SetConfig+0xaa>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a2b      	ldr	r2, [pc, #172]	; (8002bb0 <TIM_Base_SetConfig+0x14c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d003      	beq.n	8002b0e <TIM_Base_SetConfig+0xaa>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a26      	ldr	r2, [pc, #152]	; (8002ba4 <TIM_Base_SetConfig+0x140>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d108      	bne.n	8002b20 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <TIM_Base_SetConfig+0x12c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d013      	beq.n	8002b74 <TIM_Base_SetConfig+0x110>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <TIM_Base_SetConfig+0x13c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d00f      	beq.n	8002b74 <TIM_Base_SetConfig+0x110>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a14      	ldr	r2, [pc, #80]	; (8002ba8 <TIM_Base_SetConfig+0x144>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00b      	beq.n	8002b74 <TIM_Base_SetConfig+0x110>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a13      	ldr	r2, [pc, #76]	; (8002bac <TIM_Base_SetConfig+0x148>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d007      	beq.n	8002b74 <TIM_Base_SetConfig+0x110>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <TIM_Base_SetConfig+0x14c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d003      	beq.n	8002b74 <TIM_Base_SetConfig+0x110>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a0d      	ldr	r2, [pc, #52]	; (8002ba4 <TIM_Base_SetConfig+0x140>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d103      	bne.n	8002b7c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	615a      	str	r2, [r3, #20]
}
 8002b82:	bf00      	nop
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40012c00 	.word	0x40012c00
 8002b94:	40000400 	.word	0x40000400
 8002b98:	40000800 	.word	0x40000800
 8002b9c:	40000c00 	.word	0x40000c00
 8002ba0:	40013400 	.word	0x40013400
 8002ba4:	40015000 	.word	0x40015000
 8002ba8:	40014000 	.word	0x40014000
 8002bac:	40014400 	.word	0x40014400
 8002bb0:	40014800 	.word	0x40014800

08002bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e074      	b.n	8002cb6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a34      	ldr	r2, [pc, #208]	; (8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d009      	beq.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a33      	ldr	r2, [pc, #204]	; (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d004      	beq.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a31      	ldr	r2, [pc, #196]	; (8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d108      	bne.n	8002c1c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a21      	ldr	r2, [pc, #132]	; (8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d022      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4c:	d01d      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1f      	ldr	r2, [pc, #124]	; (8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d018      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00e      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a15      	ldr	r2, [pc, #84]	; (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d009      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a18      	ldr	r2, [pc, #96]	; (8002cdc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d004      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a11      	ldr	r2, [pc, #68]	; (8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d10c      	bne.n	8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40012c00 	.word	0x40012c00
 8002cc8:	40013400 	.word	0x40013400
 8002ccc:	40015000 	.word	0x40015000
 8002cd0:	40000400 	.word	0x40000400
 8002cd4:	40000800 	.word	0x40000800
 8002cd8:	40000c00 	.word	0x40000c00
 8002cdc:	40014000 	.word	0x40014000

08002ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <__libc_init_array>:
 8002d6c:	b570      	push	{r4, r5, r6, lr}
 8002d6e:	4d0d      	ldr	r5, [pc, #52]	; (8002da4 <__libc_init_array+0x38>)
 8002d70:	4c0d      	ldr	r4, [pc, #52]	; (8002da8 <__libc_init_array+0x3c>)
 8002d72:	1b64      	subs	r4, r4, r5
 8002d74:	10a4      	asrs	r4, r4, #2
 8002d76:	2600      	movs	r6, #0
 8002d78:	42a6      	cmp	r6, r4
 8002d7a:	d109      	bne.n	8002d90 <__libc_init_array+0x24>
 8002d7c:	4d0b      	ldr	r5, [pc, #44]	; (8002dac <__libc_init_array+0x40>)
 8002d7e:	4c0c      	ldr	r4, [pc, #48]	; (8002db0 <__libc_init_array+0x44>)
 8002d80:	f001 f86c 	bl	8003e5c <_init>
 8002d84:	1b64      	subs	r4, r4, r5
 8002d86:	10a4      	asrs	r4, r4, #2
 8002d88:	2600      	movs	r6, #0
 8002d8a:	42a6      	cmp	r6, r4
 8002d8c:	d105      	bne.n	8002d9a <__libc_init_array+0x2e>
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}
 8002d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d94:	4798      	blx	r3
 8002d96:	3601      	adds	r6, #1
 8002d98:	e7ee      	b.n	8002d78 <__libc_init_array+0xc>
 8002d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d9e:	4798      	blx	r3
 8002da0:	3601      	adds	r6, #1
 8002da2:	e7f2      	b.n	8002d8a <__libc_init_array+0x1e>
 8002da4:	08004060 	.word	0x08004060
 8002da8:	08004060 	.word	0x08004060
 8002dac:	08004060 	.word	0x08004060
 8002db0:	08004064 	.word	0x08004064

08002db4 <memset>:
 8002db4:	4402      	add	r2, r0
 8002db6:	4603      	mov	r3, r0
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d100      	bne.n	8002dbe <memset+0xa>
 8002dbc:	4770      	bx	lr
 8002dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8002dc2:	e7f9      	b.n	8002db8 <memset+0x4>
 8002dc4:	0000      	movs	r0, r0
	...

08002dc8 <sin>:
 8002dc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002dca:	ec53 2b10 	vmov	r2, r3, d0
 8002dce:	4828      	ldr	r0, [pc, #160]	; (8002e70 <sin+0xa8>)
 8002dd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002dd4:	4281      	cmp	r1, r0
 8002dd6:	dc07      	bgt.n	8002de8 <sin+0x20>
 8002dd8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8002e68 <sin+0xa0>
 8002ddc:	2000      	movs	r0, #0
 8002dde:	b005      	add	sp, #20
 8002de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002de4:	f000 be6c 	b.w	8003ac0 <__kernel_sin>
 8002de8:	4822      	ldr	r0, [pc, #136]	; (8002e74 <sin+0xac>)
 8002dea:	4281      	cmp	r1, r0
 8002dec:	dd09      	ble.n	8002e02 <sin+0x3a>
 8002dee:	ee10 0a10 	vmov	r0, s0
 8002df2:	4619      	mov	r1, r3
 8002df4:	f7fd fb3e 	bl	8000474 <__aeabi_dsub>
 8002df8:	ec41 0b10 	vmov	d0, r0, r1
 8002dfc:	b005      	add	sp, #20
 8002dfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e02:	4668      	mov	r0, sp
 8002e04:	f000 f838 	bl	8002e78 <__ieee754_rem_pio2>
 8002e08:	f000 0003 	and.w	r0, r0, #3
 8002e0c:	2801      	cmp	r0, #1
 8002e0e:	d00c      	beq.n	8002e2a <sin+0x62>
 8002e10:	2802      	cmp	r0, #2
 8002e12:	d011      	beq.n	8002e38 <sin+0x70>
 8002e14:	b9f0      	cbnz	r0, 8002e54 <sin+0x8c>
 8002e16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002e1a:	ed9d 0b00 	vldr	d0, [sp]
 8002e1e:	2001      	movs	r0, #1
 8002e20:	f000 fe4e 	bl	8003ac0 <__kernel_sin>
 8002e24:	ec51 0b10 	vmov	r0, r1, d0
 8002e28:	e7e6      	b.n	8002df8 <sin+0x30>
 8002e2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002e2e:	ed9d 0b00 	vldr	d0, [sp]
 8002e32:	f000 fa2d 	bl	8003290 <__kernel_cos>
 8002e36:	e7f5      	b.n	8002e24 <sin+0x5c>
 8002e38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002e3c:	ed9d 0b00 	vldr	d0, [sp]
 8002e40:	2001      	movs	r0, #1
 8002e42:	f000 fe3d 	bl	8003ac0 <__kernel_sin>
 8002e46:	ec53 2b10 	vmov	r2, r3, d0
 8002e4a:	ee10 0a10 	vmov	r0, s0
 8002e4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002e52:	e7d1      	b.n	8002df8 <sin+0x30>
 8002e54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002e58:	ed9d 0b00 	vldr	d0, [sp]
 8002e5c:	f000 fa18 	bl	8003290 <__kernel_cos>
 8002e60:	e7f1      	b.n	8002e46 <sin+0x7e>
 8002e62:	bf00      	nop
 8002e64:	f3af 8000 	nop.w
	...
 8002e70:	3fe921fb 	.word	0x3fe921fb
 8002e74:	7fefffff 	.word	0x7fefffff

08002e78 <__ieee754_rem_pio2>:
 8002e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e7c:	ed2d 8b02 	vpush	{d8}
 8002e80:	ec55 4b10 	vmov	r4, r5, d0
 8002e84:	4bca      	ldr	r3, [pc, #808]	; (80031b0 <__ieee754_rem_pio2+0x338>)
 8002e86:	b08b      	sub	sp, #44	; 0x2c
 8002e88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8002e8c:	4598      	cmp	r8, r3
 8002e8e:	4682      	mov	sl, r0
 8002e90:	9502      	str	r5, [sp, #8]
 8002e92:	dc08      	bgt.n	8002ea6 <__ieee754_rem_pio2+0x2e>
 8002e94:	2200      	movs	r2, #0
 8002e96:	2300      	movs	r3, #0
 8002e98:	ed80 0b00 	vstr	d0, [r0]
 8002e9c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8002ea0:	f04f 0b00 	mov.w	fp, #0
 8002ea4:	e028      	b.n	8002ef8 <__ieee754_rem_pio2+0x80>
 8002ea6:	4bc3      	ldr	r3, [pc, #780]	; (80031b4 <__ieee754_rem_pio2+0x33c>)
 8002ea8:	4598      	cmp	r8, r3
 8002eaa:	dc78      	bgt.n	8002f9e <__ieee754_rem_pio2+0x126>
 8002eac:	9b02      	ldr	r3, [sp, #8]
 8002eae:	4ec2      	ldr	r6, [pc, #776]	; (80031b8 <__ieee754_rem_pio2+0x340>)
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	ee10 0a10 	vmov	r0, s0
 8002eb6:	a3b0      	add	r3, pc, #704	; (adr r3, 8003178 <__ieee754_rem_pio2+0x300>)
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	dd39      	ble.n	8002f34 <__ieee754_rem_pio2+0xbc>
 8002ec0:	f7fd fad8 	bl	8000474 <__aeabi_dsub>
 8002ec4:	45b0      	cmp	r8, r6
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	460d      	mov	r5, r1
 8002eca:	d01b      	beq.n	8002f04 <__ieee754_rem_pio2+0x8c>
 8002ecc:	a3ac      	add	r3, pc, #688	; (adr r3, 8003180 <__ieee754_rem_pio2+0x308>)
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	f7fd facf 	bl	8000474 <__aeabi_dsub>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	e9ca 2300 	strd	r2, r3, [sl]
 8002ede:	4620      	mov	r0, r4
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	f7fd fac7 	bl	8000474 <__aeabi_dsub>
 8002ee6:	a3a6      	add	r3, pc, #664	; (adr r3, 8003180 <__ieee754_rem_pio2+0x308>)
 8002ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eec:	f7fd fac2 	bl	8000474 <__aeabi_dsub>
 8002ef0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002ef4:	f04f 0b01 	mov.w	fp, #1
 8002ef8:	4658      	mov	r0, fp
 8002efa:	b00b      	add	sp, #44	; 0x2c
 8002efc:	ecbd 8b02 	vpop	{d8}
 8002f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f04:	a3a0      	add	r3, pc, #640	; (adr r3, 8003188 <__ieee754_rem_pio2+0x310>)
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	f7fd fab3 	bl	8000474 <__aeabi_dsub>
 8002f0e:	a3a0      	add	r3, pc, #640	; (adr r3, 8003190 <__ieee754_rem_pio2+0x318>)
 8002f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f14:	4604      	mov	r4, r0
 8002f16:	460d      	mov	r5, r1
 8002f18:	f7fd faac 	bl	8000474 <__aeabi_dsub>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	e9ca 2300 	strd	r2, r3, [sl]
 8002f24:	4620      	mov	r0, r4
 8002f26:	4629      	mov	r1, r5
 8002f28:	f7fd faa4 	bl	8000474 <__aeabi_dsub>
 8002f2c:	a398      	add	r3, pc, #608	; (adr r3, 8003190 <__ieee754_rem_pio2+0x318>)
 8002f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f32:	e7db      	b.n	8002eec <__ieee754_rem_pio2+0x74>
 8002f34:	f7fd faa0 	bl	8000478 <__adddf3>
 8002f38:	45b0      	cmp	r8, r6
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	460d      	mov	r5, r1
 8002f3e:	d016      	beq.n	8002f6e <__ieee754_rem_pio2+0xf6>
 8002f40:	a38f      	add	r3, pc, #572	; (adr r3, 8003180 <__ieee754_rem_pio2+0x308>)
 8002f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f46:	f7fd fa97 	bl	8000478 <__adddf3>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	e9ca 2300 	strd	r2, r3, [sl]
 8002f52:	4620      	mov	r0, r4
 8002f54:	4629      	mov	r1, r5
 8002f56:	f7fd fa8d 	bl	8000474 <__aeabi_dsub>
 8002f5a:	a389      	add	r3, pc, #548	; (adr r3, 8003180 <__ieee754_rem_pio2+0x308>)
 8002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f60:	f7fd fa8a 	bl	8000478 <__adddf3>
 8002f64:	f04f 3bff 	mov.w	fp, #4294967295
 8002f68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002f6c:	e7c4      	b.n	8002ef8 <__ieee754_rem_pio2+0x80>
 8002f6e:	a386      	add	r3, pc, #536	; (adr r3, 8003188 <__ieee754_rem_pio2+0x310>)
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	f7fd fa80 	bl	8000478 <__adddf3>
 8002f78:	a385      	add	r3, pc, #532	; (adr r3, 8003190 <__ieee754_rem_pio2+0x318>)
 8002f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7e:	4604      	mov	r4, r0
 8002f80:	460d      	mov	r5, r1
 8002f82:	f7fd fa79 	bl	8000478 <__adddf3>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	e9ca 2300 	strd	r2, r3, [sl]
 8002f8e:	4620      	mov	r0, r4
 8002f90:	4629      	mov	r1, r5
 8002f92:	f7fd fa6f 	bl	8000474 <__aeabi_dsub>
 8002f96:	a37e      	add	r3, pc, #504	; (adr r3, 8003190 <__ieee754_rem_pio2+0x318>)
 8002f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9c:	e7e0      	b.n	8002f60 <__ieee754_rem_pio2+0xe8>
 8002f9e:	4b87      	ldr	r3, [pc, #540]	; (80031bc <__ieee754_rem_pio2+0x344>)
 8002fa0:	4598      	cmp	r8, r3
 8002fa2:	f300 80d9 	bgt.w	8003158 <__ieee754_rem_pio2+0x2e0>
 8002fa6:	f000 fe49 	bl	8003c3c <fabs>
 8002faa:	ec55 4b10 	vmov	r4, r5, d0
 8002fae:	ee10 0a10 	vmov	r0, s0
 8002fb2:	a379      	add	r3, pc, #484	; (adr r3, 8003198 <__ieee754_rem_pio2+0x320>)
 8002fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb8:	4629      	mov	r1, r5
 8002fba:	f7fd f92d 	bl	8000218 <__aeabi_dmul>
 8002fbe:	4b80      	ldr	r3, [pc, #512]	; (80031c0 <__ieee754_rem_pio2+0x348>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f7fd fa59 	bl	8000478 <__adddf3>
 8002fc6:	f7fd fc95 	bl	80008f4 <__aeabi_d2iz>
 8002fca:	4683      	mov	fp, r0
 8002fcc:	f7fd fba0 	bl	8000710 <__aeabi_i2d>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	ec43 2b18 	vmov	d8, r2, r3
 8002fd8:	a367      	add	r3, pc, #412	; (adr r3, 8003178 <__ieee754_rem_pio2+0x300>)
 8002fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fde:	f7fd f91b 	bl	8000218 <__aeabi_dmul>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	4629      	mov	r1, r5
 8002fea:	f7fd fa43 	bl	8000474 <__aeabi_dsub>
 8002fee:	a364      	add	r3, pc, #400	; (adr r3, 8003180 <__ieee754_rem_pio2+0x308>)
 8002ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff4:	4606      	mov	r6, r0
 8002ff6:	460f      	mov	r7, r1
 8002ff8:	ec51 0b18 	vmov	r0, r1, d8
 8002ffc:	f7fd f90c 	bl	8000218 <__aeabi_dmul>
 8003000:	f1bb 0f1f 	cmp.w	fp, #31
 8003004:	4604      	mov	r4, r0
 8003006:	460d      	mov	r5, r1
 8003008:	dc0d      	bgt.n	8003026 <__ieee754_rem_pio2+0x1ae>
 800300a:	4b6e      	ldr	r3, [pc, #440]	; (80031c4 <__ieee754_rem_pio2+0x34c>)
 800300c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003014:	4543      	cmp	r3, r8
 8003016:	d006      	beq.n	8003026 <__ieee754_rem_pio2+0x1ae>
 8003018:	4622      	mov	r2, r4
 800301a:	462b      	mov	r3, r5
 800301c:	4630      	mov	r0, r6
 800301e:	4639      	mov	r1, r7
 8003020:	f7fd fa28 	bl	8000474 <__aeabi_dsub>
 8003024:	e00f      	b.n	8003046 <__ieee754_rem_pio2+0x1ce>
 8003026:	462b      	mov	r3, r5
 8003028:	4622      	mov	r2, r4
 800302a:	4630      	mov	r0, r6
 800302c:	4639      	mov	r1, r7
 800302e:	f7fd fa21 	bl	8000474 <__aeabi_dsub>
 8003032:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003036:	9303      	str	r3, [sp, #12]
 8003038:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800303c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8003040:	f1b8 0f10 	cmp.w	r8, #16
 8003044:	dc02      	bgt.n	800304c <__ieee754_rem_pio2+0x1d4>
 8003046:	e9ca 0100 	strd	r0, r1, [sl]
 800304a:	e039      	b.n	80030c0 <__ieee754_rem_pio2+0x248>
 800304c:	a34e      	add	r3, pc, #312	; (adr r3, 8003188 <__ieee754_rem_pio2+0x310>)
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	ec51 0b18 	vmov	r0, r1, d8
 8003056:	f7fd f8df 	bl	8000218 <__aeabi_dmul>
 800305a:	4604      	mov	r4, r0
 800305c:	460d      	mov	r5, r1
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4630      	mov	r0, r6
 8003064:	4639      	mov	r1, r7
 8003066:	f7fd fa05 	bl	8000474 <__aeabi_dsub>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4680      	mov	r8, r0
 8003070:	4689      	mov	r9, r1
 8003072:	4630      	mov	r0, r6
 8003074:	4639      	mov	r1, r7
 8003076:	f7fd f9fd 	bl	8000474 <__aeabi_dsub>
 800307a:	4622      	mov	r2, r4
 800307c:	462b      	mov	r3, r5
 800307e:	f7fd f9f9 	bl	8000474 <__aeabi_dsub>
 8003082:	a343      	add	r3, pc, #268	; (adr r3, 8003190 <__ieee754_rem_pio2+0x318>)
 8003084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003088:	4604      	mov	r4, r0
 800308a:	460d      	mov	r5, r1
 800308c:	ec51 0b18 	vmov	r0, r1, d8
 8003090:	f7fd f8c2 	bl	8000218 <__aeabi_dmul>
 8003094:	4622      	mov	r2, r4
 8003096:	462b      	mov	r3, r5
 8003098:	f7fd f9ec 	bl	8000474 <__aeabi_dsub>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4604      	mov	r4, r0
 80030a2:	460d      	mov	r5, r1
 80030a4:	4640      	mov	r0, r8
 80030a6:	4649      	mov	r1, r9
 80030a8:	f7fd f9e4 	bl	8000474 <__aeabi_dsub>
 80030ac:	9a03      	ldr	r2, [sp, #12]
 80030ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b31      	cmp	r3, #49	; 0x31
 80030b6:	dc24      	bgt.n	8003102 <__ieee754_rem_pio2+0x28a>
 80030b8:	e9ca 0100 	strd	r0, r1, [sl]
 80030bc:	4646      	mov	r6, r8
 80030be:	464f      	mov	r7, r9
 80030c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80030c4:	4630      	mov	r0, r6
 80030c6:	4642      	mov	r2, r8
 80030c8:	464b      	mov	r3, r9
 80030ca:	4639      	mov	r1, r7
 80030cc:	f7fd f9d2 	bl	8000474 <__aeabi_dsub>
 80030d0:	462b      	mov	r3, r5
 80030d2:	4622      	mov	r2, r4
 80030d4:	f7fd f9ce 	bl	8000474 <__aeabi_dsub>
 80030d8:	9b02      	ldr	r3, [sp, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80030e0:	f6bf af0a 	bge.w	8002ef8 <__ieee754_rem_pio2+0x80>
 80030e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80030e8:	f8ca 3004 	str.w	r3, [sl, #4]
 80030ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80030f0:	f8ca 8000 	str.w	r8, [sl]
 80030f4:	f8ca 0008 	str.w	r0, [sl, #8]
 80030f8:	f8ca 300c 	str.w	r3, [sl, #12]
 80030fc:	f1cb 0b00 	rsb	fp, fp, #0
 8003100:	e6fa      	b.n	8002ef8 <__ieee754_rem_pio2+0x80>
 8003102:	a327      	add	r3, pc, #156	; (adr r3, 80031a0 <__ieee754_rem_pio2+0x328>)
 8003104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003108:	ec51 0b18 	vmov	r0, r1, d8
 800310c:	f7fd f884 	bl	8000218 <__aeabi_dmul>
 8003110:	4604      	mov	r4, r0
 8003112:	460d      	mov	r5, r1
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4640      	mov	r0, r8
 800311a:	4649      	mov	r1, r9
 800311c:	f7fd f9aa 	bl	8000474 <__aeabi_dsub>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4606      	mov	r6, r0
 8003126:	460f      	mov	r7, r1
 8003128:	4640      	mov	r0, r8
 800312a:	4649      	mov	r1, r9
 800312c:	f7fd f9a2 	bl	8000474 <__aeabi_dsub>
 8003130:	4622      	mov	r2, r4
 8003132:	462b      	mov	r3, r5
 8003134:	f7fd f99e 	bl	8000474 <__aeabi_dsub>
 8003138:	a31b      	add	r3, pc, #108	; (adr r3, 80031a8 <__ieee754_rem_pio2+0x330>)
 800313a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313e:	4604      	mov	r4, r0
 8003140:	460d      	mov	r5, r1
 8003142:	ec51 0b18 	vmov	r0, r1, d8
 8003146:	f7fd f867 	bl	8000218 <__aeabi_dmul>
 800314a:	4622      	mov	r2, r4
 800314c:	462b      	mov	r3, r5
 800314e:	f7fd f991 	bl	8000474 <__aeabi_dsub>
 8003152:	4604      	mov	r4, r0
 8003154:	460d      	mov	r5, r1
 8003156:	e75f      	b.n	8003018 <__ieee754_rem_pio2+0x1a0>
 8003158:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <__ieee754_rem_pio2+0x350>)
 800315a:	4598      	cmp	r8, r3
 800315c:	dd36      	ble.n	80031cc <__ieee754_rem_pio2+0x354>
 800315e:	ee10 2a10 	vmov	r2, s0
 8003162:	462b      	mov	r3, r5
 8003164:	4620      	mov	r0, r4
 8003166:	4629      	mov	r1, r5
 8003168:	f7fd f984 	bl	8000474 <__aeabi_dsub>
 800316c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003170:	e9ca 0100 	strd	r0, r1, [sl]
 8003174:	e694      	b.n	8002ea0 <__ieee754_rem_pio2+0x28>
 8003176:	bf00      	nop
 8003178:	54400000 	.word	0x54400000
 800317c:	3ff921fb 	.word	0x3ff921fb
 8003180:	1a626331 	.word	0x1a626331
 8003184:	3dd0b461 	.word	0x3dd0b461
 8003188:	1a600000 	.word	0x1a600000
 800318c:	3dd0b461 	.word	0x3dd0b461
 8003190:	2e037073 	.word	0x2e037073
 8003194:	3ba3198a 	.word	0x3ba3198a
 8003198:	6dc9c883 	.word	0x6dc9c883
 800319c:	3fe45f30 	.word	0x3fe45f30
 80031a0:	2e000000 	.word	0x2e000000
 80031a4:	3ba3198a 	.word	0x3ba3198a
 80031a8:	252049c1 	.word	0x252049c1
 80031ac:	397b839a 	.word	0x397b839a
 80031b0:	3fe921fb 	.word	0x3fe921fb
 80031b4:	4002d97b 	.word	0x4002d97b
 80031b8:	3ff921fb 	.word	0x3ff921fb
 80031bc:	413921fb 	.word	0x413921fb
 80031c0:	3fe00000 	.word	0x3fe00000
 80031c4:	08003e88 	.word	0x08003e88
 80031c8:	7fefffff 	.word	0x7fefffff
 80031cc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80031d0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80031d4:	ee10 0a10 	vmov	r0, s0
 80031d8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80031dc:	ee10 6a10 	vmov	r6, s0
 80031e0:	460f      	mov	r7, r1
 80031e2:	f7fd fb87 	bl	80008f4 <__aeabi_d2iz>
 80031e6:	f7fd fa93 	bl	8000710 <__aeabi_i2d>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4630      	mov	r0, r6
 80031f0:	4639      	mov	r1, r7
 80031f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80031f6:	f7fd f93d 	bl	8000474 <__aeabi_dsub>
 80031fa:	4b23      	ldr	r3, [pc, #140]	; (8003288 <__ieee754_rem_pio2+0x410>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	f7fd f80b 	bl	8000218 <__aeabi_dmul>
 8003202:	460f      	mov	r7, r1
 8003204:	4606      	mov	r6, r0
 8003206:	f7fd fb75 	bl	80008f4 <__aeabi_d2iz>
 800320a:	f7fd fa81 	bl	8000710 <__aeabi_i2d>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4630      	mov	r0, r6
 8003214:	4639      	mov	r1, r7
 8003216:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800321a:	f7fd f92b 	bl	8000474 <__aeabi_dsub>
 800321e:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <__ieee754_rem_pio2+0x410>)
 8003220:	2200      	movs	r2, #0
 8003222:	f7fc fff9 	bl	8000218 <__aeabi_dmul>
 8003226:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800322a:	ad04      	add	r5, sp, #16
 800322c:	f04f 0803 	mov.w	r8, #3
 8003230:	46a9      	mov	r9, r5
 8003232:	2600      	movs	r6, #0
 8003234:	2700      	movs	r7, #0
 8003236:	4632      	mov	r2, r6
 8003238:	463b      	mov	r3, r7
 800323a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800323e:	46c3      	mov	fp, r8
 8003240:	3d08      	subs	r5, #8
 8003242:	f108 38ff 	add.w	r8, r8, #4294967295
 8003246:	f7fd fb23 	bl	8000890 <__aeabi_dcmpeq>
 800324a:	2800      	cmp	r0, #0
 800324c:	d1f3      	bne.n	8003236 <__ieee754_rem_pio2+0x3be>
 800324e:	4b0f      	ldr	r3, [pc, #60]	; (800328c <__ieee754_rem_pio2+0x414>)
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	2302      	movs	r3, #2
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	4622      	mov	r2, r4
 8003258:	465b      	mov	r3, fp
 800325a:	4651      	mov	r1, sl
 800325c:	4648      	mov	r0, r9
 800325e:	f000 f8df 	bl	8003420 <__kernel_rem_pio2>
 8003262:	9b02      	ldr	r3, [sp, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	4683      	mov	fp, r0
 8003268:	f6bf ae46 	bge.w	8002ef8 <__ieee754_rem_pio2+0x80>
 800326c:	e9da 2100 	ldrd	r2, r1, [sl]
 8003270:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003274:	e9ca 2300 	strd	r2, r3, [sl]
 8003278:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800327c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003280:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8003284:	e73a      	b.n	80030fc <__ieee754_rem_pio2+0x284>
 8003286:	bf00      	nop
 8003288:	41700000 	.word	0x41700000
 800328c:	08003f08 	.word	0x08003f08

08003290 <__kernel_cos>:
 8003290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003294:	ec57 6b10 	vmov	r6, r7, d0
 8003298:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800329c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80032a0:	ed8d 1b00 	vstr	d1, [sp]
 80032a4:	da07      	bge.n	80032b6 <__kernel_cos+0x26>
 80032a6:	ee10 0a10 	vmov	r0, s0
 80032aa:	4639      	mov	r1, r7
 80032ac:	f7fd fb22 	bl	80008f4 <__aeabi_d2iz>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	f000 8088 	beq.w	80033c6 <__kernel_cos+0x136>
 80032b6:	4632      	mov	r2, r6
 80032b8:	463b      	mov	r3, r7
 80032ba:	4630      	mov	r0, r6
 80032bc:	4639      	mov	r1, r7
 80032be:	f7fc ffab 	bl	8000218 <__aeabi_dmul>
 80032c2:	4b51      	ldr	r3, [pc, #324]	; (8003408 <__kernel_cos+0x178>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	4604      	mov	r4, r0
 80032c8:	460d      	mov	r5, r1
 80032ca:	f7fc ffa5 	bl	8000218 <__aeabi_dmul>
 80032ce:	a340      	add	r3, pc, #256	; (adr r3, 80033d0 <__kernel_cos+0x140>)
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	4682      	mov	sl, r0
 80032d6:	468b      	mov	fp, r1
 80032d8:	4620      	mov	r0, r4
 80032da:	4629      	mov	r1, r5
 80032dc:	f7fc ff9c 	bl	8000218 <__aeabi_dmul>
 80032e0:	a33d      	add	r3, pc, #244	; (adr r3, 80033d8 <__kernel_cos+0x148>)
 80032e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e6:	f7fd f8c7 	bl	8000478 <__adddf3>
 80032ea:	4622      	mov	r2, r4
 80032ec:	462b      	mov	r3, r5
 80032ee:	f7fc ff93 	bl	8000218 <__aeabi_dmul>
 80032f2:	a33b      	add	r3, pc, #236	; (adr r3, 80033e0 <__kernel_cos+0x150>)
 80032f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f8:	f7fd f8bc 	bl	8000474 <__aeabi_dsub>
 80032fc:	4622      	mov	r2, r4
 80032fe:	462b      	mov	r3, r5
 8003300:	f7fc ff8a 	bl	8000218 <__aeabi_dmul>
 8003304:	a338      	add	r3, pc, #224	; (adr r3, 80033e8 <__kernel_cos+0x158>)
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	f7fd f8b5 	bl	8000478 <__adddf3>
 800330e:	4622      	mov	r2, r4
 8003310:	462b      	mov	r3, r5
 8003312:	f7fc ff81 	bl	8000218 <__aeabi_dmul>
 8003316:	a336      	add	r3, pc, #216	; (adr r3, 80033f0 <__kernel_cos+0x160>)
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	f7fd f8aa 	bl	8000474 <__aeabi_dsub>
 8003320:	4622      	mov	r2, r4
 8003322:	462b      	mov	r3, r5
 8003324:	f7fc ff78 	bl	8000218 <__aeabi_dmul>
 8003328:	a333      	add	r3, pc, #204	; (adr r3, 80033f8 <__kernel_cos+0x168>)
 800332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332e:	f7fd f8a3 	bl	8000478 <__adddf3>
 8003332:	4622      	mov	r2, r4
 8003334:	462b      	mov	r3, r5
 8003336:	f7fc ff6f 	bl	8000218 <__aeabi_dmul>
 800333a:	4622      	mov	r2, r4
 800333c:	462b      	mov	r3, r5
 800333e:	f7fc ff6b 	bl	8000218 <__aeabi_dmul>
 8003342:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003346:	4604      	mov	r4, r0
 8003348:	460d      	mov	r5, r1
 800334a:	4630      	mov	r0, r6
 800334c:	4639      	mov	r1, r7
 800334e:	f7fc ff63 	bl	8000218 <__aeabi_dmul>
 8003352:	460b      	mov	r3, r1
 8003354:	4602      	mov	r2, r0
 8003356:	4629      	mov	r1, r5
 8003358:	4620      	mov	r0, r4
 800335a:	f7fd f88b 	bl	8000474 <__aeabi_dsub>
 800335e:	4b2b      	ldr	r3, [pc, #172]	; (800340c <__kernel_cos+0x17c>)
 8003360:	4598      	cmp	r8, r3
 8003362:	4606      	mov	r6, r0
 8003364:	460f      	mov	r7, r1
 8003366:	dc10      	bgt.n	800338a <__kernel_cos+0xfa>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4650      	mov	r0, sl
 800336e:	4659      	mov	r1, fp
 8003370:	f7fd f880 	bl	8000474 <__aeabi_dsub>
 8003374:	460b      	mov	r3, r1
 8003376:	4926      	ldr	r1, [pc, #152]	; (8003410 <__kernel_cos+0x180>)
 8003378:	4602      	mov	r2, r0
 800337a:	2000      	movs	r0, #0
 800337c:	f7fd f87a 	bl	8000474 <__aeabi_dsub>
 8003380:	ec41 0b10 	vmov	d0, r0, r1
 8003384:	b003      	add	sp, #12
 8003386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800338a:	4b22      	ldr	r3, [pc, #136]	; (8003414 <__kernel_cos+0x184>)
 800338c:	4920      	ldr	r1, [pc, #128]	; (8003410 <__kernel_cos+0x180>)
 800338e:	4598      	cmp	r8, r3
 8003390:	bfcc      	ite	gt
 8003392:	4d21      	ldrgt	r5, [pc, #132]	; (8003418 <__kernel_cos+0x188>)
 8003394:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8003398:	2400      	movs	r4, #0
 800339a:	4622      	mov	r2, r4
 800339c:	462b      	mov	r3, r5
 800339e:	2000      	movs	r0, #0
 80033a0:	f7fd f868 	bl	8000474 <__aeabi_dsub>
 80033a4:	4622      	mov	r2, r4
 80033a6:	4680      	mov	r8, r0
 80033a8:	4689      	mov	r9, r1
 80033aa:	462b      	mov	r3, r5
 80033ac:	4650      	mov	r0, sl
 80033ae:	4659      	mov	r1, fp
 80033b0:	f7fd f860 	bl	8000474 <__aeabi_dsub>
 80033b4:	4632      	mov	r2, r6
 80033b6:	463b      	mov	r3, r7
 80033b8:	f7fd f85c 	bl	8000474 <__aeabi_dsub>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4640      	mov	r0, r8
 80033c2:	4649      	mov	r1, r9
 80033c4:	e7da      	b.n	800337c <__kernel_cos+0xec>
 80033c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8003400 <__kernel_cos+0x170>
 80033ca:	e7db      	b.n	8003384 <__kernel_cos+0xf4>
 80033cc:	f3af 8000 	nop.w
 80033d0:	be8838d4 	.word	0xbe8838d4
 80033d4:	bda8fae9 	.word	0xbda8fae9
 80033d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80033dc:	3e21ee9e 	.word	0x3e21ee9e
 80033e0:	809c52ad 	.word	0x809c52ad
 80033e4:	3e927e4f 	.word	0x3e927e4f
 80033e8:	19cb1590 	.word	0x19cb1590
 80033ec:	3efa01a0 	.word	0x3efa01a0
 80033f0:	16c15177 	.word	0x16c15177
 80033f4:	3f56c16c 	.word	0x3f56c16c
 80033f8:	5555554c 	.word	0x5555554c
 80033fc:	3fa55555 	.word	0x3fa55555
 8003400:	00000000 	.word	0x00000000
 8003404:	3ff00000 	.word	0x3ff00000
 8003408:	3fe00000 	.word	0x3fe00000
 800340c:	3fd33332 	.word	0x3fd33332
 8003410:	3ff00000 	.word	0x3ff00000
 8003414:	3fe90000 	.word	0x3fe90000
 8003418:	3fd20000 	.word	0x3fd20000
 800341c:	00000000 	.word	0x00000000

08003420 <__kernel_rem_pio2>:
 8003420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003424:	ed2d 8b02 	vpush	{d8}
 8003428:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800342c:	f112 0f14 	cmn.w	r2, #20
 8003430:	9308      	str	r3, [sp, #32]
 8003432:	9101      	str	r1, [sp, #4]
 8003434:	4bc4      	ldr	r3, [pc, #784]	; (8003748 <__kernel_rem_pio2+0x328>)
 8003436:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8003438:	900b      	str	r0, [sp, #44]	; 0x2c
 800343a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800343e:	9302      	str	r3, [sp, #8]
 8003440:	9b08      	ldr	r3, [sp, #32]
 8003442:	f103 33ff 	add.w	r3, r3, #4294967295
 8003446:	bfa8      	it	ge
 8003448:	1ed4      	subge	r4, r2, #3
 800344a:	9306      	str	r3, [sp, #24]
 800344c:	bfb2      	itee	lt
 800344e:	2400      	movlt	r4, #0
 8003450:	2318      	movge	r3, #24
 8003452:	fb94 f4f3 	sdivge	r4, r4, r3
 8003456:	f06f 0317 	mvn.w	r3, #23
 800345a:	fb04 3303 	mla	r3, r4, r3, r3
 800345e:	eb03 0a02 	add.w	sl, r3, r2
 8003462:	9b02      	ldr	r3, [sp, #8]
 8003464:	9a06      	ldr	r2, [sp, #24]
 8003466:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8003738 <__kernel_rem_pio2+0x318>
 800346a:	eb03 0802 	add.w	r8, r3, r2
 800346e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003470:	1aa7      	subs	r7, r4, r2
 8003472:	ae22      	add	r6, sp, #136	; 0x88
 8003474:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003478:	2500      	movs	r5, #0
 800347a:	4545      	cmp	r5, r8
 800347c:	dd13      	ble.n	80034a6 <__kernel_rem_pio2+0x86>
 800347e:	9b08      	ldr	r3, [sp, #32]
 8003480:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8003738 <__kernel_rem_pio2+0x318>
 8003484:	aa22      	add	r2, sp, #136	; 0x88
 8003486:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800348a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800348e:	f04f 0800 	mov.w	r8, #0
 8003492:	9b02      	ldr	r3, [sp, #8]
 8003494:	4598      	cmp	r8, r3
 8003496:	dc2f      	bgt.n	80034f8 <__kernel_rem_pio2+0xd8>
 8003498:	ed8d 8b04 	vstr	d8, [sp, #16]
 800349c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80034a0:	462f      	mov	r7, r5
 80034a2:	2600      	movs	r6, #0
 80034a4:	e01b      	b.n	80034de <__kernel_rem_pio2+0xbe>
 80034a6:	42ef      	cmn	r7, r5
 80034a8:	d407      	bmi.n	80034ba <__kernel_rem_pio2+0x9a>
 80034aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80034ae:	f7fd f92f 	bl	8000710 <__aeabi_i2d>
 80034b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80034b6:	3501      	adds	r5, #1
 80034b8:	e7df      	b.n	800347a <__kernel_rem_pio2+0x5a>
 80034ba:	ec51 0b18 	vmov	r0, r1, d8
 80034be:	e7f8      	b.n	80034b2 <__kernel_rem_pio2+0x92>
 80034c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80034c8:	f7fc fea6 	bl	8000218 <__aeabi_dmul>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80034d4:	f7fc ffd0 	bl	8000478 <__adddf3>
 80034d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80034dc:	3601      	adds	r6, #1
 80034de:	9b06      	ldr	r3, [sp, #24]
 80034e0:	429e      	cmp	r6, r3
 80034e2:	f1a7 0708 	sub.w	r7, r7, #8
 80034e6:	ddeb      	ble.n	80034c0 <__kernel_rem_pio2+0xa0>
 80034e8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80034ec:	f108 0801 	add.w	r8, r8, #1
 80034f0:	ecab 7b02 	vstmia	fp!, {d7}
 80034f4:	3508      	adds	r5, #8
 80034f6:	e7cc      	b.n	8003492 <__kernel_rem_pio2+0x72>
 80034f8:	9b02      	ldr	r3, [sp, #8]
 80034fa:	aa0e      	add	r2, sp, #56	; 0x38
 80034fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003500:	930d      	str	r3, [sp, #52]	; 0x34
 8003502:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003504:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003508:	9c02      	ldr	r4, [sp, #8]
 800350a:	930c      	str	r3, [sp, #48]	; 0x30
 800350c:	00e3      	lsls	r3, r4, #3
 800350e:	930a      	str	r3, [sp, #40]	; 0x28
 8003510:	ab9a      	add	r3, sp, #616	; 0x268
 8003512:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003516:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800351a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800351e:	ab72      	add	r3, sp, #456	; 0x1c8
 8003520:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8003524:	46c3      	mov	fp, r8
 8003526:	46a1      	mov	r9, r4
 8003528:	f1b9 0f00 	cmp.w	r9, #0
 800352c:	f1a5 0508 	sub.w	r5, r5, #8
 8003530:	dc77      	bgt.n	8003622 <__kernel_rem_pio2+0x202>
 8003532:	ec47 6b10 	vmov	d0, r6, r7
 8003536:	4650      	mov	r0, sl
 8003538:	f000 fc0a 	bl	8003d50 <scalbn>
 800353c:	ec57 6b10 	vmov	r6, r7, d0
 8003540:	2200      	movs	r2, #0
 8003542:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003546:	ee10 0a10 	vmov	r0, s0
 800354a:	4639      	mov	r1, r7
 800354c:	f7fc fe64 	bl	8000218 <__aeabi_dmul>
 8003550:	ec41 0b10 	vmov	d0, r0, r1
 8003554:	f000 fb7c 	bl	8003c50 <floor>
 8003558:	4b7c      	ldr	r3, [pc, #496]	; (800374c <__kernel_rem_pio2+0x32c>)
 800355a:	ec51 0b10 	vmov	r0, r1, d0
 800355e:	2200      	movs	r2, #0
 8003560:	f7fc fe5a 	bl	8000218 <__aeabi_dmul>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4630      	mov	r0, r6
 800356a:	4639      	mov	r1, r7
 800356c:	f7fc ff82 	bl	8000474 <__aeabi_dsub>
 8003570:	460f      	mov	r7, r1
 8003572:	4606      	mov	r6, r0
 8003574:	f7fd f9be 	bl	80008f4 <__aeabi_d2iz>
 8003578:	9004      	str	r0, [sp, #16]
 800357a:	f7fd f8c9 	bl	8000710 <__aeabi_i2d>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4630      	mov	r0, r6
 8003584:	4639      	mov	r1, r7
 8003586:	f7fc ff75 	bl	8000474 <__aeabi_dsub>
 800358a:	f1ba 0f00 	cmp.w	sl, #0
 800358e:	4606      	mov	r6, r0
 8003590:	460f      	mov	r7, r1
 8003592:	dd6d      	ble.n	8003670 <__kernel_rem_pio2+0x250>
 8003594:	1e62      	subs	r2, r4, #1
 8003596:	ab0e      	add	r3, sp, #56	; 0x38
 8003598:	9d04      	ldr	r5, [sp, #16]
 800359a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800359e:	f1ca 0118 	rsb	r1, sl, #24
 80035a2:	fa40 f301 	asr.w	r3, r0, r1
 80035a6:	441d      	add	r5, r3
 80035a8:	408b      	lsls	r3, r1
 80035aa:	1ac0      	subs	r0, r0, r3
 80035ac:	ab0e      	add	r3, sp, #56	; 0x38
 80035ae:	9504      	str	r5, [sp, #16]
 80035b0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80035b4:	f1ca 0317 	rsb	r3, sl, #23
 80035b8:	fa40 fb03 	asr.w	fp, r0, r3
 80035bc:	f1bb 0f00 	cmp.w	fp, #0
 80035c0:	dd65      	ble.n	800368e <__kernel_rem_pio2+0x26e>
 80035c2:	9b04      	ldr	r3, [sp, #16]
 80035c4:	2200      	movs	r2, #0
 80035c6:	3301      	adds	r3, #1
 80035c8:	9304      	str	r3, [sp, #16]
 80035ca:	4615      	mov	r5, r2
 80035cc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80035d0:	4294      	cmp	r4, r2
 80035d2:	f300 809c 	bgt.w	800370e <__kernel_rem_pio2+0x2ee>
 80035d6:	f1ba 0f00 	cmp.w	sl, #0
 80035da:	dd07      	ble.n	80035ec <__kernel_rem_pio2+0x1cc>
 80035dc:	f1ba 0f01 	cmp.w	sl, #1
 80035e0:	f000 80c0 	beq.w	8003764 <__kernel_rem_pio2+0x344>
 80035e4:	f1ba 0f02 	cmp.w	sl, #2
 80035e8:	f000 80c6 	beq.w	8003778 <__kernel_rem_pio2+0x358>
 80035ec:	f1bb 0f02 	cmp.w	fp, #2
 80035f0:	d14d      	bne.n	800368e <__kernel_rem_pio2+0x26e>
 80035f2:	4632      	mov	r2, r6
 80035f4:	463b      	mov	r3, r7
 80035f6:	4956      	ldr	r1, [pc, #344]	; (8003750 <__kernel_rem_pio2+0x330>)
 80035f8:	2000      	movs	r0, #0
 80035fa:	f7fc ff3b 	bl	8000474 <__aeabi_dsub>
 80035fe:	4606      	mov	r6, r0
 8003600:	460f      	mov	r7, r1
 8003602:	2d00      	cmp	r5, #0
 8003604:	d043      	beq.n	800368e <__kernel_rem_pio2+0x26e>
 8003606:	4650      	mov	r0, sl
 8003608:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8003740 <__kernel_rem_pio2+0x320>
 800360c:	f000 fba0 	bl	8003d50 <scalbn>
 8003610:	4630      	mov	r0, r6
 8003612:	4639      	mov	r1, r7
 8003614:	ec53 2b10 	vmov	r2, r3, d0
 8003618:	f7fc ff2c 	bl	8000474 <__aeabi_dsub>
 800361c:	4606      	mov	r6, r0
 800361e:	460f      	mov	r7, r1
 8003620:	e035      	b.n	800368e <__kernel_rem_pio2+0x26e>
 8003622:	4b4c      	ldr	r3, [pc, #304]	; (8003754 <__kernel_rem_pio2+0x334>)
 8003624:	2200      	movs	r2, #0
 8003626:	4630      	mov	r0, r6
 8003628:	4639      	mov	r1, r7
 800362a:	f7fc fdf5 	bl	8000218 <__aeabi_dmul>
 800362e:	f7fd f961 	bl	80008f4 <__aeabi_d2iz>
 8003632:	f7fd f86d 	bl	8000710 <__aeabi_i2d>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	ec43 2b18 	vmov	d8, r2, r3
 800363e:	4b46      	ldr	r3, [pc, #280]	; (8003758 <__kernel_rem_pio2+0x338>)
 8003640:	2200      	movs	r2, #0
 8003642:	f7fc fde9 	bl	8000218 <__aeabi_dmul>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4630      	mov	r0, r6
 800364c:	4639      	mov	r1, r7
 800364e:	f7fc ff11 	bl	8000474 <__aeabi_dsub>
 8003652:	f7fd f94f 	bl	80008f4 <__aeabi_d2iz>
 8003656:	e9d5 2300 	ldrd	r2, r3, [r5]
 800365a:	f84b 0b04 	str.w	r0, [fp], #4
 800365e:	ec51 0b18 	vmov	r0, r1, d8
 8003662:	f7fc ff09 	bl	8000478 <__adddf3>
 8003666:	f109 39ff 	add.w	r9, r9, #4294967295
 800366a:	4606      	mov	r6, r0
 800366c:	460f      	mov	r7, r1
 800366e:	e75b      	b.n	8003528 <__kernel_rem_pio2+0x108>
 8003670:	d106      	bne.n	8003680 <__kernel_rem_pio2+0x260>
 8003672:	1e63      	subs	r3, r4, #1
 8003674:	aa0e      	add	r2, sp, #56	; 0x38
 8003676:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800367a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800367e:	e79d      	b.n	80035bc <__kernel_rem_pio2+0x19c>
 8003680:	4b36      	ldr	r3, [pc, #216]	; (800375c <__kernel_rem_pio2+0x33c>)
 8003682:	2200      	movs	r2, #0
 8003684:	f7fd f922 	bl	80008cc <__aeabi_dcmpge>
 8003688:	2800      	cmp	r0, #0
 800368a:	d13d      	bne.n	8003708 <__kernel_rem_pio2+0x2e8>
 800368c:	4683      	mov	fp, r0
 800368e:	2200      	movs	r2, #0
 8003690:	2300      	movs	r3, #0
 8003692:	4630      	mov	r0, r6
 8003694:	4639      	mov	r1, r7
 8003696:	f7fd f8fb 	bl	8000890 <__aeabi_dcmpeq>
 800369a:	2800      	cmp	r0, #0
 800369c:	f000 80c0 	beq.w	8003820 <__kernel_rem_pio2+0x400>
 80036a0:	1e65      	subs	r5, r4, #1
 80036a2:	462b      	mov	r3, r5
 80036a4:	2200      	movs	r2, #0
 80036a6:	9902      	ldr	r1, [sp, #8]
 80036a8:	428b      	cmp	r3, r1
 80036aa:	da6c      	bge.n	8003786 <__kernel_rem_pio2+0x366>
 80036ac:	2a00      	cmp	r2, #0
 80036ae:	f000 8089 	beq.w	80037c4 <__kernel_rem_pio2+0x3a4>
 80036b2:	ab0e      	add	r3, sp, #56	; 0x38
 80036b4:	f1aa 0a18 	sub.w	sl, sl, #24
 80036b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80ad 	beq.w	800381c <__kernel_rem_pio2+0x3fc>
 80036c2:	4650      	mov	r0, sl
 80036c4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8003740 <__kernel_rem_pio2+0x320>
 80036c8:	f000 fb42 	bl	8003d50 <scalbn>
 80036cc:	ab9a      	add	r3, sp, #616	; 0x268
 80036ce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80036d2:	ec57 6b10 	vmov	r6, r7, d0
 80036d6:	00ec      	lsls	r4, r5, #3
 80036d8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80036dc:	46aa      	mov	sl, r5
 80036de:	f1ba 0f00 	cmp.w	sl, #0
 80036e2:	f280 80d6 	bge.w	8003892 <__kernel_rem_pio2+0x472>
 80036e6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8003738 <__kernel_rem_pio2+0x318>
 80036ea:	462e      	mov	r6, r5
 80036ec:	2e00      	cmp	r6, #0
 80036ee:	f2c0 8104 	blt.w	80038fa <__kernel_rem_pio2+0x4da>
 80036f2:	ab72      	add	r3, sp, #456	; 0x1c8
 80036f4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80036f8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8003760 <__kernel_rem_pio2+0x340>
 80036fc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8003700:	f04f 0800 	mov.w	r8, #0
 8003704:	1baf      	subs	r7, r5, r6
 8003706:	e0ea      	b.n	80038de <__kernel_rem_pio2+0x4be>
 8003708:	f04f 0b02 	mov.w	fp, #2
 800370c:	e759      	b.n	80035c2 <__kernel_rem_pio2+0x1a2>
 800370e:	f8d8 3000 	ldr.w	r3, [r8]
 8003712:	b955      	cbnz	r5, 800372a <__kernel_rem_pio2+0x30a>
 8003714:	b123      	cbz	r3, 8003720 <__kernel_rem_pio2+0x300>
 8003716:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800371a:	f8c8 3000 	str.w	r3, [r8]
 800371e:	2301      	movs	r3, #1
 8003720:	3201      	adds	r2, #1
 8003722:	f108 0804 	add.w	r8, r8, #4
 8003726:	461d      	mov	r5, r3
 8003728:	e752      	b.n	80035d0 <__kernel_rem_pio2+0x1b0>
 800372a:	1acb      	subs	r3, r1, r3
 800372c:	f8c8 3000 	str.w	r3, [r8]
 8003730:	462b      	mov	r3, r5
 8003732:	e7f5      	b.n	8003720 <__kernel_rem_pio2+0x300>
 8003734:	f3af 8000 	nop.w
	...
 8003744:	3ff00000 	.word	0x3ff00000
 8003748:	08004050 	.word	0x08004050
 800374c:	40200000 	.word	0x40200000
 8003750:	3ff00000 	.word	0x3ff00000
 8003754:	3e700000 	.word	0x3e700000
 8003758:	41700000 	.word	0x41700000
 800375c:	3fe00000 	.word	0x3fe00000
 8003760:	08004010 	.word	0x08004010
 8003764:	1e62      	subs	r2, r4, #1
 8003766:	ab0e      	add	r3, sp, #56	; 0x38
 8003768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800376c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003770:	a90e      	add	r1, sp, #56	; 0x38
 8003772:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003776:	e739      	b.n	80035ec <__kernel_rem_pio2+0x1cc>
 8003778:	1e62      	subs	r2, r4, #1
 800377a:	ab0e      	add	r3, sp, #56	; 0x38
 800377c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003780:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003784:	e7f4      	b.n	8003770 <__kernel_rem_pio2+0x350>
 8003786:	a90e      	add	r1, sp, #56	; 0x38
 8003788:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800378c:	3b01      	subs	r3, #1
 800378e:	430a      	orrs	r2, r1
 8003790:	e789      	b.n	80036a6 <__kernel_rem_pio2+0x286>
 8003792:	3301      	adds	r3, #1
 8003794:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003798:	2900      	cmp	r1, #0
 800379a:	d0fa      	beq.n	8003792 <__kernel_rem_pio2+0x372>
 800379c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800379e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80037a2:	446a      	add	r2, sp
 80037a4:	3a98      	subs	r2, #152	; 0x98
 80037a6:	920a      	str	r2, [sp, #40]	; 0x28
 80037a8:	9a08      	ldr	r2, [sp, #32]
 80037aa:	18e3      	adds	r3, r4, r3
 80037ac:	18a5      	adds	r5, r4, r2
 80037ae:	aa22      	add	r2, sp, #136	; 0x88
 80037b0:	f104 0801 	add.w	r8, r4, #1
 80037b4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80037b8:	9304      	str	r3, [sp, #16]
 80037ba:	9b04      	ldr	r3, [sp, #16]
 80037bc:	4543      	cmp	r3, r8
 80037be:	da04      	bge.n	80037ca <__kernel_rem_pio2+0x3aa>
 80037c0:	461c      	mov	r4, r3
 80037c2:	e6a3      	b.n	800350c <__kernel_rem_pio2+0xec>
 80037c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80037c6:	2301      	movs	r3, #1
 80037c8:	e7e4      	b.n	8003794 <__kernel_rem_pio2+0x374>
 80037ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80037cc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80037d0:	f7fc ff9e 	bl	8000710 <__aeabi_i2d>
 80037d4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80037d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80037da:	46ab      	mov	fp, r5
 80037dc:	461c      	mov	r4, r3
 80037de:	f04f 0900 	mov.w	r9, #0
 80037e2:	2600      	movs	r6, #0
 80037e4:	2700      	movs	r7, #0
 80037e6:	9b06      	ldr	r3, [sp, #24]
 80037e8:	4599      	cmp	r9, r3
 80037ea:	dd06      	ble.n	80037fa <__kernel_rem_pio2+0x3da>
 80037ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037ee:	e8e3 6702 	strd	r6, r7, [r3], #8
 80037f2:	f108 0801 	add.w	r8, r8, #1
 80037f6:	930a      	str	r3, [sp, #40]	; 0x28
 80037f8:	e7df      	b.n	80037ba <__kernel_rem_pio2+0x39a>
 80037fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80037fe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003802:	f7fc fd09 	bl	8000218 <__aeabi_dmul>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4630      	mov	r0, r6
 800380c:	4639      	mov	r1, r7
 800380e:	f7fc fe33 	bl	8000478 <__adddf3>
 8003812:	f109 0901 	add.w	r9, r9, #1
 8003816:	4606      	mov	r6, r0
 8003818:	460f      	mov	r7, r1
 800381a:	e7e4      	b.n	80037e6 <__kernel_rem_pio2+0x3c6>
 800381c:	3d01      	subs	r5, #1
 800381e:	e748      	b.n	80036b2 <__kernel_rem_pio2+0x292>
 8003820:	ec47 6b10 	vmov	d0, r6, r7
 8003824:	f1ca 0000 	rsb	r0, sl, #0
 8003828:	f000 fa92 	bl	8003d50 <scalbn>
 800382c:	ec57 6b10 	vmov	r6, r7, d0
 8003830:	4ba0      	ldr	r3, [pc, #640]	; (8003ab4 <__kernel_rem_pio2+0x694>)
 8003832:	ee10 0a10 	vmov	r0, s0
 8003836:	2200      	movs	r2, #0
 8003838:	4639      	mov	r1, r7
 800383a:	f7fd f847 	bl	80008cc <__aeabi_dcmpge>
 800383e:	b1f8      	cbz	r0, 8003880 <__kernel_rem_pio2+0x460>
 8003840:	4b9d      	ldr	r3, [pc, #628]	; (8003ab8 <__kernel_rem_pio2+0x698>)
 8003842:	2200      	movs	r2, #0
 8003844:	4630      	mov	r0, r6
 8003846:	4639      	mov	r1, r7
 8003848:	f7fc fce6 	bl	8000218 <__aeabi_dmul>
 800384c:	f7fd f852 	bl	80008f4 <__aeabi_d2iz>
 8003850:	4680      	mov	r8, r0
 8003852:	f7fc ff5d 	bl	8000710 <__aeabi_i2d>
 8003856:	4b97      	ldr	r3, [pc, #604]	; (8003ab4 <__kernel_rem_pio2+0x694>)
 8003858:	2200      	movs	r2, #0
 800385a:	f7fc fcdd 	bl	8000218 <__aeabi_dmul>
 800385e:	460b      	mov	r3, r1
 8003860:	4602      	mov	r2, r0
 8003862:	4639      	mov	r1, r7
 8003864:	4630      	mov	r0, r6
 8003866:	f7fc fe05 	bl	8000474 <__aeabi_dsub>
 800386a:	f7fd f843 	bl	80008f4 <__aeabi_d2iz>
 800386e:	1c65      	adds	r5, r4, #1
 8003870:	ab0e      	add	r3, sp, #56	; 0x38
 8003872:	f10a 0a18 	add.w	sl, sl, #24
 8003876:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800387a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800387e:	e720      	b.n	80036c2 <__kernel_rem_pio2+0x2a2>
 8003880:	4630      	mov	r0, r6
 8003882:	4639      	mov	r1, r7
 8003884:	f7fd f836 	bl	80008f4 <__aeabi_d2iz>
 8003888:	ab0e      	add	r3, sp, #56	; 0x38
 800388a:	4625      	mov	r5, r4
 800388c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003890:	e717      	b.n	80036c2 <__kernel_rem_pio2+0x2a2>
 8003892:	ab0e      	add	r3, sp, #56	; 0x38
 8003894:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8003898:	f7fc ff3a 	bl	8000710 <__aeabi_i2d>
 800389c:	4632      	mov	r2, r6
 800389e:	463b      	mov	r3, r7
 80038a0:	f7fc fcba 	bl	8000218 <__aeabi_dmul>
 80038a4:	4b84      	ldr	r3, [pc, #528]	; (8003ab8 <__kernel_rem_pio2+0x698>)
 80038a6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80038aa:	2200      	movs	r2, #0
 80038ac:	4630      	mov	r0, r6
 80038ae:	4639      	mov	r1, r7
 80038b0:	f7fc fcb2 	bl	8000218 <__aeabi_dmul>
 80038b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80038b8:	4606      	mov	r6, r0
 80038ba:	460f      	mov	r7, r1
 80038bc:	e70f      	b.n	80036de <__kernel_rem_pio2+0x2be>
 80038be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80038c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80038c6:	f7fc fca7 	bl	8000218 <__aeabi_dmul>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80038d2:	f7fc fdd1 	bl	8000478 <__adddf3>
 80038d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80038da:	f108 0801 	add.w	r8, r8, #1
 80038de:	9b02      	ldr	r3, [sp, #8]
 80038e0:	4598      	cmp	r8, r3
 80038e2:	dc01      	bgt.n	80038e8 <__kernel_rem_pio2+0x4c8>
 80038e4:	45b8      	cmp	r8, r7
 80038e6:	ddea      	ble.n	80038be <__kernel_rem_pio2+0x49e>
 80038e8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80038ec:	ab4a      	add	r3, sp, #296	; 0x128
 80038ee:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80038f2:	ed87 7b00 	vstr	d7, [r7]
 80038f6:	3e01      	subs	r6, #1
 80038f8:	e6f8      	b.n	80036ec <__kernel_rem_pio2+0x2cc>
 80038fa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	dc0b      	bgt.n	8003918 <__kernel_rem_pio2+0x4f8>
 8003900:	2b00      	cmp	r3, #0
 8003902:	dc35      	bgt.n	8003970 <__kernel_rem_pio2+0x550>
 8003904:	d059      	beq.n	80039ba <__kernel_rem_pio2+0x59a>
 8003906:	9b04      	ldr	r3, [sp, #16]
 8003908:	f003 0007 	and.w	r0, r3, #7
 800390c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8003910:	ecbd 8b02 	vpop	{d8}
 8003914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003918:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800391a:	2b03      	cmp	r3, #3
 800391c:	d1f3      	bne.n	8003906 <__kernel_rem_pio2+0x4e6>
 800391e:	ab4a      	add	r3, sp, #296	; 0x128
 8003920:	4423      	add	r3, r4
 8003922:	9306      	str	r3, [sp, #24]
 8003924:	461c      	mov	r4, r3
 8003926:	469a      	mov	sl, r3
 8003928:	9502      	str	r5, [sp, #8]
 800392a:	9b02      	ldr	r3, [sp, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	f1aa 0a08 	sub.w	sl, sl, #8
 8003932:	dc6b      	bgt.n	8003a0c <__kernel_rem_pio2+0x5ec>
 8003934:	46aa      	mov	sl, r5
 8003936:	f1ba 0f01 	cmp.w	sl, #1
 800393a:	f1a4 0408 	sub.w	r4, r4, #8
 800393e:	f300 8085 	bgt.w	8003a4c <__kernel_rem_pio2+0x62c>
 8003942:	9c06      	ldr	r4, [sp, #24]
 8003944:	2000      	movs	r0, #0
 8003946:	3408      	adds	r4, #8
 8003948:	2100      	movs	r1, #0
 800394a:	2d01      	cmp	r5, #1
 800394c:	f300 809d 	bgt.w	8003a8a <__kernel_rem_pio2+0x66a>
 8003950:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8003954:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8003958:	f1bb 0f00 	cmp.w	fp, #0
 800395c:	f040 809b 	bne.w	8003a96 <__kernel_rem_pio2+0x676>
 8003960:	9b01      	ldr	r3, [sp, #4]
 8003962:	e9c3 5600 	strd	r5, r6, [r3]
 8003966:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800396a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800396e:	e7ca      	b.n	8003906 <__kernel_rem_pio2+0x4e6>
 8003970:	3408      	adds	r4, #8
 8003972:	ab4a      	add	r3, sp, #296	; 0x128
 8003974:	441c      	add	r4, r3
 8003976:	462e      	mov	r6, r5
 8003978:	2000      	movs	r0, #0
 800397a:	2100      	movs	r1, #0
 800397c:	2e00      	cmp	r6, #0
 800397e:	da36      	bge.n	80039ee <__kernel_rem_pio2+0x5ce>
 8003980:	f1bb 0f00 	cmp.w	fp, #0
 8003984:	d039      	beq.n	80039fa <__kernel_rem_pio2+0x5da>
 8003986:	4602      	mov	r2, r0
 8003988:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800398c:	9c01      	ldr	r4, [sp, #4]
 800398e:	e9c4 2300 	strd	r2, r3, [r4]
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800399a:	f7fc fd6b 	bl	8000474 <__aeabi_dsub>
 800399e:	ae4c      	add	r6, sp, #304	; 0x130
 80039a0:	2401      	movs	r4, #1
 80039a2:	42a5      	cmp	r5, r4
 80039a4:	da2c      	bge.n	8003a00 <__kernel_rem_pio2+0x5e0>
 80039a6:	f1bb 0f00 	cmp.w	fp, #0
 80039aa:	d002      	beq.n	80039b2 <__kernel_rem_pio2+0x592>
 80039ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80039b0:	4619      	mov	r1, r3
 80039b2:	9b01      	ldr	r3, [sp, #4]
 80039b4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80039b8:	e7a5      	b.n	8003906 <__kernel_rem_pio2+0x4e6>
 80039ba:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80039be:	eb0d 0403 	add.w	r4, sp, r3
 80039c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80039c6:	2000      	movs	r0, #0
 80039c8:	2100      	movs	r1, #0
 80039ca:	2d00      	cmp	r5, #0
 80039cc:	da09      	bge.n	80039e2 <__kernel_rem_pio2+0x5c2>
 80039ce:	f1bb 0f00 	cmp.w	fp, #0
 80039d2:	d002      	beq.n	80039da <__kernel_rem_pio2+0x5ba>
 80039d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80039d8:	4619      	mov	r1, r3
 80039da:	9b01      	ldr	r3, [sp, #4]
 80039dc:	e9c3 0100 	strd	r0, r1, [r3]
 80039e0:	e791      	b.n	8003906 <__kernel_rem_pio2+0x4e6>
 80039e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80039e6:	f7fc fd47 	bl	8000478 <__adddf3>
 80039ea:	3d01      	subs	r5, #1
 80039ec:	e7ed      	b.n	80039ca <__kernel_rem_pio2+0x5aa>
 80039ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80039f2:	f7fc fd41 	bl	8000478 <__adddf3>
 80039f6:	3e01      	subs	r6, #1
 80039f8:	e7c0      	b.n	800397c <__kernel_rem_pio2+0x55c>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	e7c5      	b.n	800398c <__kernel_rem_pio2+0x56c>
 8003a00:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8003a04:	f7fc fd38 	bl	8000478 <__adddf3>
 8003a08:	3401      	adds	r4, #1
 8003a0a:	e7ca      	b.n	80039a2 <__kernel_rem_pio2+0x582>
 8003a0c:	e9da 8900 	ldrd	r8, r9, [sl]
 8003a10:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8003a14:	9b02      	ldr	r3, [sp, #8]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	9302      	str	r3, [sp, #8]
 8003a1a:	4632      	mov	r2, r6
 8003a1c:	463b      	mov	r3, r7
 8003a1e:	4640      	mov	r0, r8
 8003a20:	4649      	mov	r1, r9
 8003a22:	f7fc fd29 	bl	8000478 <__adddf3>
 8003a26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4640      	mov	r0, r8
 8003a30:	4649      	mov	r1, r9
 8003a32:	f7fc fd1f 	bl	8000474 <__aeabi_dsub>
 8003a36:	4632      	mov	r2, r6
 8003a38:	463b      	mov	r3, r7
 8003a3a:	f7fc fd1d 	bl	8000478 <__adddf3>
 8003a3e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8003a42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003a46:	ed8a 7b00 	vstr	d7, [sl]
 8003a4a:	e76e      	b.n	800392a <__kernel_rem_pio2+0x50a>
 8003a4c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003a50:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8003a54:	4640      	mov	r0, r8
 8003a56:	4632      	mov	r2, r6
 8003a58:	463b      	mov	r3, r7
 8003a5a:	4649      	mov	r1, r9
 8003a5c:	f7fc fd0c 	bl	8000478 <__adddf3>
 8003a60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4640      	mov	r0, r8
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	f7fc fd02 	bl	8000474 <__aeabi_dsub>
 8003a70:	4632      	mov	r2, r6
 8003a72:	463b      	mov	r3, r7
 8003a74:	f7fc fd00 	bl	8000478 <__adddf3>
 8003a78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003a7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003a80:	ed84 7b00 	vstr	d7, [r4]
 8003a84:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a88:	e755      	b.n	8003936 <__kernel_rem_pio2+0x516>
 8003a8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003a8e:	f7fc fcf3 	bl	8000478 <__adddf3>
 8003a92:	3d01      	subs	r5, #1
 8003a94:	e759      	b.n	800394a <__kernel_rem_pio2+0x52a>
 8003a96:	9b01      	ldr	r3, [sp, #4]
 8003a98:	9a01      	ldr	r2, [sp, #4]
 8003a9a:	601d      	str	r5, [r3, #0]
 8003a9c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8003aa0:	605c      	str	r4, [r3, #4]
 8003aa2:	609f      	str	r7, [r3, #8]
 8003aa4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8003aa8:	60d3      	str	r3, [r2, #12]
 8003aaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003aae:	6110      	str	r0, [r2, #16]
 8003ab0:	6153      	str	r3, [r2, #20]
 8003ab2:	e728      	b.n	8003906 <__kernel_rem_pio2+0x4e6>
 8003ab4:	41700000 	.word	0x41700000
 8003ab8:	3e700000 	.word	0x3e700000
 8003abc:	00000000 	.word	0x00000000

08003ac0 <__kernel_sin>:
 8003ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac4:	ed2d 8b04 	vpush	{d8-d9}
 8003ac8:	eeb0 8a41 	vmov.f32	s16, s2
 8003acc:	eef0 8a61 	vmov.f32	s17, s3
 8003ad0:	ec55 4b10 	vmov	r4, r5, d0
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003ada:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003ade:	9001      	str	r0, [sp, #4]
 8003ae0:	da06      	bge.n	8003af0 <__kernel_sin+0x30>
 8003ae2:	ee10 0a10 	vmov	r0, s0
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	f7fc ff04 	bl	80008f4 <__aeabi_d2iz>
 8003aec:	2800      	cmp	r0, #0
 8003aee:	d051      	beq.n	8003b94 <__kernel_sin+0xd4>
 8003af0:	4622      	mov	r2, r4
 8003af2:	462b      	mov	r3, r5
 8003af4:	4620      	mov	r0, r4
 8003af6:	4629      	mov	r1, r5
 8003af8:	f7fc fb8e 	bl	8000218 <__aeabi_dmul>
 8003afc:	4682      	mov	sl, r0
 8003afe:	468b      	mov	fp, r1
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4620      	mov	r0, r4
 8003b06:	4629      	mov	r1, r5
 8003b08:	f7fc fb86 	bl	8000218 <__aeabi_dmul>
 8003b0c:	a341      	add	r3, pc, #260	; (adr r3, 8003c14 <__kernel_sin+0x154>)
 8003b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b12:	4680      	mov	r8, r0
 8003b14:	4689      	mov	r9, r1
 8003b16:	4650      	mov	r0, sl
 8003b18:	4659      	mov	r1, fp
 8003b1a:	f7fc fb7d 	bl	8000218 <__aeabi_dmul>
 8003b1e:	a33f      	add	r3, pc, #252	; (adr r3, 8003c1c <__kernel_sin+0x15c>)
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	f7fc fca6 	bl	8000474 <__aeabi_dsub>
 8003b28:	4652      	mov	r2, sl
 8003b2a:	465b      	mov	r3, fp
 8003b2c:	f7fc fb74 	bl	8000218 <__aeabi_dmul>
 8003b30:	a33c      	add	r3, pc, #240	; (adr r3, 8003c24 <__kernel_sin+0x164>)
 8003b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b36:	f7fc fc9f 	bl	8000478 <__adddf3>
 8003b3a:	4652      	mov	r2, sl
 8003b3c:	465b      	mov	r3, fp
 8003b3e:	f7fc fb6b 	bl	8000218 <__aeabi_dmul>
 8003b42:	a33a      	add	r3, pc, #232	; (adr r3, 8003c2c <__kernel_sin+0x16c>)
 8003b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b48:	f7fc fc94 	bl	8000474 <__aeabi_dsub>
 8003b4c:	4652      	mov	r2, sl
 8003b4e:	465b      	mov	r3, fp
 8003b50:	f7fc fb62 	bl	8000218 <__aeabi_dmul>
 8003b54:	a337      	add	r3, pc, #220	; (adr r3, 8003c34 <__kernel_sin+0x174>)
 8003b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5a:	f7fc fc8d 	bl	8000478 <__adddf3>
 8003b5e:	9b01      	ldr	r3, [sp, #4]
 8003b60:	4606      	mov	r6, r0
 8003b62:	460f      	mov	r7, r1
 8003b64:	b9eb      	cbnz	r3, 8003ba2 <__kernel_sin+0xe2>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4650      	mov	r0, sl
 8003b6c:	4659      	mov	r1, fp
 8003b6e:	f7fc fb53 	bl	8000218 <__aeabi_dmul>
 8003b72:	a325      	add	r3, pc, #148	; (adr r3, 8003c08 <__kernel_sin+0x148>)
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	f7fc fc7c 	bl	8000474 <__aeabi_dsub>
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	464b      	mov	r3, r9
 8003b80:	f7fc fb4a 	bl	8000218 <__aeabi_dmul>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4620      	mov	r0, r4
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	f7fc fc74 	bl	8000478 <__adddf3>
 8003b90:	4604      	mov	r4, r0
 8003b92:	460d      	mov	r5, r1
 8003b94:	ec45 4b10 	vmov	d0, r4, r5
 8003b98:	b003      	add	sp, #12
 8003b9a:	ecbd 8b04 	vpop	{d8-d9}
 8003b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba2:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <__kernel_sin+0x150>)
 8003ba4:	ec51 0b18 	vmov	r0, r1, d8
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f7fc fb35 	bl	8000218 <__aeabi_dmul>
 8003bae:	4632      	mov	r2, r6
 8003bb0:	ec41 0b19 	vmov	d9, r0, r1
 8003bb4:	463b      	mov	r3, r7
 8003bb6:	4640      	mov	r0, r8
 8003bb8:	4649      	mov	r1, r9
 8003bba:	f7fc fb2d 	bl	8000218 <__aeabi_dmul>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	ec51 0b19 	vmov	r0, r1, d9
 8003bc6:	f7fc fc55 	bl	8000474 <__aeabi_dsub>
 8003bca:	4652      	mov	r2, sl
 8003bcc:	465b      	mov	r3, fp
 8003bce:	f7fc fb23 	bl	8000218 <__aeabi_dmul>
 8003bd2:	ec53 2b18 	vmov	r2, r3, d8
 8003bd6:	f7fc fc4d 	bl	8000474 <__aeabi_dsub>
 8003bda:	a30b      	add	r3, pc, #44	; (adr r3, 8003c08 <__kernel_sin+0x148>)
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	4606      	mov	r6, r0
 8003be2:	460f      	mov	r7, r1
 8003be4:	4640      	mov	r0, r8
 8003be6:	4649      	mov	r1, r9
 8003be8:	f7fc fb16 	bl	8000218 <__aeabi_dmul>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4630      	mov	r0, r6
 8003bf2:	4639      	mov	r1, r7
 8003bf4:	f7fc fc40 	bl	8000478 <__adddf3>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	4629      	mov	r1, r5
 8003c00:	f7fc fc38 	bl	8000474 <__aeabi_dsub>
 8003c04:	e7c4      	b.n	8003b90 <__kernel_sin+0xd0>
 8003c06:	bf00      	nop
 8003c08:	55555549 	.word	0x55555549
 8003c0c:	3fc55555 	.word	0x3fc55555
 8003c10:	3fe00000 	.word	0x3fe00000
 8003c14:	5acfd57c 	.word	0x5acfd57c
 8003c18:	3de5d93a 	.word	0x3de5d93a
 8003c1c:	8a2b9ceb 	.word	0x8a2b9ceb
 8003c20:	3e5ae5e6 	.word	0x3e5ae5e6
 8003c24:	57b1fe7d 	.word	0x57b1fe7d
 8003c28:	3ec71de3 	.word	0x3ec71de3
 8003c2c:	19c161d5 	.word	0x19c161d5
 8003c30:	3f2a01a0 	.word	0x3f2a01a0
 8003c34:	1110f8a6 	.word	0x1110f8a6
 8003c38:	3f811111 	.word	0x3f811111

08003c3c <fabs>:
 8003c3c:	ec51 0b10 	vmov	r0, r1, d0
 8003c40:	ee10 2a10 	vmov	r2, s0
 8003c44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003c48:	ec43 2b10 	vmov	d0, r2, r3
 8003c4c:	4770      	bx	lr
	...

08003c50 <floor>:
 8003c50:	ec51 0b10 	vmov	r0, r1, d0
 8003c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c58:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003c5c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8003c60:	2e13      	cmp	r6, #19
 8003c62:	ee10 5a10 	vmov	r5, s0
 8003c66:	ee10 8a10 	vmov	r8, s0
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	dc32      	bgt.n	8003cd4 <floor+0x84>
 8003c6e:	2e00      	cmp	r6, #0
 8003c70:	da14      	bge.n	8003c9c <floor+0x4c>
 8003c72:	a333      	add	r3, pc, #204	; (adr r3, 8003d40 <floor+0xf0>)
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f7fc fbfe 	bl	8000478 <__adddf3>
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f7fc fe2e 	bl	80008e0 <__aeabi_dcmpgt>
 8003c84:	b138      	cbz	r0, 8003c96 <floor+0x46>
 8003c86:	2c00      	cmp	r4, #0
 8003c88:	da57      	bge.n	8003d3a <floor+0xea>
 8003c8a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003c8e:	431d      	orrs	r5, r3
 8003c90:	d001      	beq.n	8003c96 <floor+0x46>
 8003c92:	4c2d      	ldr	r4, [pc, #180]	; (8003d48 <floor+0xf8>)
 8003c94:	2500      	movs	r5, #0
 8003c96:	4621      	mov	r1, r4
 8003c98:	4628      	mov	r0, r5
 8003c9a:	e025      	b.n	8003ce8 <floor+0x98>
 8003c9c:	4f2b      	ldr	r7, [pc, #172]	; (8003d4c <floor+0xfc>)
 8003c9e:	4137      	asrs	r7, r6
 8003ca0:	ea01 0307 	and.w	r3, r1, r7
 8003ca4:	4303      	orrs	r3, r0
 8003ca6:	d01f      	beq.n	8003ce8 <floor+0x98>
 8003ca8:	a325      	add	r3, pc, #148	; (adr r3, 8003d40 <floor+0xf0>)
 8003caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cae:	f7fc fbe3 	bl	8000478 <__adddf3>
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f7fc fe13 	bl	80008e0 <__aeabi_dcmpgt>
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	d0eb      	beq.n	8003c96 <floor+0x46>
 8003cbe:	2c00      	cmp	r4, #0
 8003cc0:	bfbe      	ittt	lt
 8003cc2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003cc6:	fa43 f606 	asrlt.w	r6, r3, r6
 8003cca:	19a4      	addlt	r4, r4, r6
 8003ccc:	ea24 0407 	bic.w	r4, r4, r7
 8003cd0:	2500      	movs	r5, #0
 8003cd2:	e7e0      	b.n	8003c96 <floor+0x46>
 8003cd4:	2e33      	cmp	r6, #51	; 0x33
 8003cd6:	dd0b      	ble.n	8003cf0 <floor+0xa0>
 8003cd8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003cdc:	d104      	bne.n	8003ce8 <floor+0x98>
 8003cde:	ee10 2a10 	vmov	r2, s0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	f7fc fbc8 	bl	8000478 <__adddf3>
 8003ce8:	ec41 0b10 	vmov	d0, r0, r1
 8003cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cf0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8003cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf8:	fa23 f707 	lsr.w	r7, r3, r7
 8003cfc:	4207      	tst	r7, r0
 8003cfe:	d0f3      	beq.n	8003ce8 <floor+0x98>
 8003d00:	a30f      	add	r3, pc, #60	; (adr r3, 8003d40 <floor+0xf0>)
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	f7fc fbb7 	bl	8000478 <__adddf3>
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f7fc fde7 	bl	80008e0 <__aeabi_dcmpgt>
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d0bf      	beq.n	8003c96 <floor+0x46>
 8003d16:	2c00      	cmp	r4, #0
 8003d18:	da02      	bge.n	8003d20 <floor+0xd0>
 8003d1a:	2e14      	cmp	r6, #20
 8003d1c:	d103      	bne.n	8003d26 <floor+0xd6>
 8003d1e:	3401      	adds	r4, #1
 8003d20:	ea25 0507 	bic.w	r5, r5, r7
 8003d24:	e7b7      	b.n	8003c96 <floor+0x46>
 8003d26:	2301      	movs	r3, #1
 8003d28:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003d2c:	fa03 f606 	lsl.w	r6, r3, r6
 8003d30:	4435      	add	r5, r6
 8003d32:	4545      	cmp	r5, r8
 8003d34:	bf38      	it	cc
 8003d36:	18e4      	addcc	r4, r4, r3
 8003d38:	e7f2      	b.n	8003d20 <floor+0xd0>
 8003d3a:	2500      	movs	r5, #0
 8003d3c:	462c      	mov	r4, r5
 8003d3e:	e7aa      	b.n	8003c96 <floor+0x46>
 8003d40:	8800759c 	.word	0x8800759c
 8003d44:	7e37e43c 	.word	0x7e37e43c
 8003d48:	bff00000 	.word	0xbff00000
 8003d4c:	000fffff 	.word	0x000fffff

08003d50 <scalbn>:
 8003d50:	b570      	push	{r4, r5, r6, lr}
 8003d52:	ec55 4b10 	vmov	r4, r5, d0
 8003d56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8003d5a:	4606      	mov	r6, r0
 8003d5c:	462b      	mov	r3, r5
 8003d5e:	b99a      	cbnz	r2, 8003d88 <scalbn+0x38>
 8003d60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003d64:	4323      	orrs	r3, r4
 8003d66:	d036      	beq.n	8003dd6 <scalbn+0x86>
 8003d68:	4b39      	ldr	r3, [pc, #228]	; (8003e50 <scalbn+0x100>)
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	ee10 0a10 	vmov	r0, s0
 8003d70:	2200      	movs	r2, #0
 8003d72:	f7fc fa51 	bl	8000218 <__aeabi_dmul>
 8003d76:	4b37      	ldr	r3, [pc, #220]	; (8003e54 <scalbn+0x104>)
 8003d78:	429e      	cmp	r6, r3
 8003d7a:	4604      	mov	r4, r0
 8003d7c:	460d      	mov	r5, r1
 8003d7e:	da10      	bge.n	8003da2 <scalbn+0x52>
 8003d80:	a32b      	add	r3, pc, #172	; (adr r3, 8003e30 <scalbn+0xe0>)
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	e03a      	b.n	8003dfe <scalbn+0xae>
 8003d88:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003d8c:	428a      	cmp	r2, r1
 8003d8e:	d10c      	bne.n	8003daa <scalbn+0x5a>
 8003d90:	ee10 2a10 	vmov	r2, s0
 8003d94:	4620      	mov	r0, r4
 8003d96:	4629      	mov	r1, r5
 8003d98:	f7fc fb6e 	bl	8000478 <__adddf3>
 8003d9c:	4604      	mov	r4, r0
 8003d9e:	460d      	mov	r5, r1
 8003da0:	e019      	b.n	8003dd6 <scalbn+0x86>
 8003da2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003da6:	460b      	mov	r3, r1
 8003da8:	3a36      	subs	r2, #54	; 0x36
 8003daa:	4432      	add	r2, r6
 8003dac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003db0:	428a      	cmp	r2, r1
 8003db2:	dd08      	ble.n	8003dc6 <scalbn+0x76>
 8003db4:	2d00      	cmp	r5, #0
 8003db6:	a120      	add	r1, pc, #128	; (adr r1, 8003e38 <scalbn+0xe8>)
 8003db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dbc:	da1c      	bge.n	8003df8 <scalbn+0xa8>
 8003dbe:	a120      	add	r1, pc, #128	; (adr r1, 8003e40 <scalbn+0xf0>)
 8003dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dc4:	e018      	b.n	8003df8 <scalbn+0xa8>
 8003dc6:	2a00      	cmp	r2, #0
 8003dc8:	dd08      	ble.n	8003ddc <scalbn+0x8c>
 8003dca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003dce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003dd2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003dd6:	ec45 4b10 	vmov	d0, r4, r5
 8003dda:	bd70      	pop	{r4, r5, r6, pc}
 8003ddc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003de0:	da19      	bge.n	8003e16 <scalbn+0xc6>
 8003de2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003de6:	429e      	cmp	r6, r3
 8003de8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8003dec:	dd0a      	ble.n	8003e04 <scalbn+0xb4>
 8003dee:	a112      	add	r1, pc, #72	; (adr r1, 8003e38 <scalbn+0xe8>)
 8003df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e2      	bne.n	8003dbe <scalbn+0x6e>
 8003df8:	a30f      	add	r3, pc, #60	; (adr r3, 8003e38 <scalbn+0xe8>)
 8003dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfe:	f7fc fa0b 	bl	8000218 <__aeabi_dmul>
 8003e02:	e7cb      	b.n	8003d9c <scalbn+0x4c>
 8003e04:	a10a      	add	r1, pc, #40	; (adr r1, 8003e30 <scalbn+0xe0>)
 8003e06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0b8      	beq.n	8003d80 <scalbn+0x30>
 8003e0e:	a10e      	add	r1, pc, #56	; (adr r1, 8003e48 <scalbn+0xf8>)
 8003e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e14:	e7b4      	b.n	8003d80 <scalbn+0x30>
 8003e16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003e1a:	3236      	adds	r2, #54	; 0x36
 8003e1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003e20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8003e24:	4620      	mov	r0, r4
 8003e26:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <scalbn+0x108>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	e7e8      	b.n	8003dfe <scalbn+0xae>
 8003e2c:	f3af 8000 	nop.w
 8003e30:	c2f8f359 	.word	0xc2f8f359
 8003e34:	01a56e1f 	.word	0x01a56e1f
 8003e38:	8800759c 	.word	0x8800759c
 8003e3c:	7e37e43c 	.word	0x7e37e43c
 8003e40:	8800759c 	.word	0x8800759c
 8003e44:	fe37e43c 	.word	0xfe37e43c
 8003e48:	c2f8f359 	.word	0xc2f8f359
 8003e4c:	81a56e1f 	.word	0x81a56e1f
 8003e50:	43500000 	.word	0x43500000
 8003e54:	ffff3cb0 	.word	0xffff3cb0
 8003e58:	3c900000 	.word	0x3c900000

08003e5c <_init>:
 8003e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5e:	bf00      	nop
 8003e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e62:	bc08      	pop	{r3}
 8003e64:	469e      	mov	lr, r3
 8003e66:	4770      	bx	lr

08003e68 <_fini>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	bf00      	nop
 8003e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6e:	bc08      	pop	{r3}
 8003e70:	469e      	mov	lr, r3
 8003e72:	4770      	bx	lr
